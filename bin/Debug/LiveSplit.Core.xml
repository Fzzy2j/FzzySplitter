<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LiveSplit.Core</name>
    </assembly>
    <members>
        <member name="M:LiveSplit.ComponentUtil.MemoryWatcher.Update(System.Diagnostics.Process)">
            <summary>
            Updates the watcher and returns true if the value has changed.
            </summary>
        </member>
        <member name="P:LiveSplit.Model.Attempt.Duration">
            <summary>
            Returns the Real Time Duration of the attempt.
            This either returns a 1.6+ Time Stamp based duration
            or the duration of the run (assuming it's not resetted)
            if it's from before LiveSplit 1.6. If it is from before
            1.6 and resetted then it will return null.
            </summary>
        </member>
        <member name="M:LiveSplit.Model.StringExtensions.Similarity(System.String,System.String)">
            <summary>
            Calculates the similarity of two strings. The lower the result is, the more similar they are.
            </summary>
            <param name="s"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:LiveSplit.Model.LiveSplitStateHelper.GetLastDelta(LiveSplit.Model.LiveSplitState,System.Int32,System.String,LiveSplit.Model.TimingMethod)">
            <summary>
            Gets the last non-live delta in the run starting from splitNumber.
            </summary>
            <param name="state">The current state.</param>
            <param name="splitNumber">The split number to start checking deltas from.</param>
            <param name="comparison">The comparison that you are comparing with.</param>
            <param name="method">The timing method that you are using.</param>
            <returns>Returns the last non-live delta or null if there have been no deltas yet.</returns>
        </member>
        <member name="M:LiveSplit.Model.LiveSplitStateHelper.GetPreviousSegmentTime(LiveSplit.Model.LiveSplitState,System.Int32,LiveSplit.Model.TimingMethod)">
            <summary>
            Gets the length of the last segment that leads up to a certain split.
            </summary>
            <param name="state">The current state.</param>
            <param name="splitNumber">The index of the split that represents the end of the segment.</param>
            <param name="method">The timing method that you are using.</param>
            <returns>Returns the length of the segment leading up to splitNumber, returning null if the split is not completed yet.</returns>
        </member>
        <member name="M:LiveSplit.Model.LiveSplitStateHelper.GetLiveSegmentTime(LiveSplit.Model.LiveSplitState,System.Int32,LiveSplit.Model.TimingMethod)">
            <summary>
            Gets the length of the last segment that leads up to a certain split, using the live segment time if the split is not completed yet.
            </summary>
            <param name="state">The current state.</param>
            <param name="splitNumber">The index of the split that represents the end of the segment.</param>
            <param name="method">The timing method that you are using.</param>
            <returns>Returns the length of the segment leading up to splitNumber, returning the live segment time if the split is not completed yet.</returns>
        </member>
        <member name="M:LiveSplit.Model.LiveSplitStateHelper.GetPreviousSegmentDelta(LiveSplit.Model.LiveSplitState,System.Int32,System.String,LiveSplit.Model.TimingMethod)">
            <summary>
            Gets the amount of time lost or gained on a certain split.
            </summary>
            <param name="state">The current state.</param>
            <param name="splitNumber">The index of the split for which the delta is calculated.</param>
            <param name="comparison">The comparison that you are comparing with.</param>
            <param name="method">The timing method that you are using.</param>
            <returns>Returns the segment delta for a certain split, returning null if the split is not completed yet.</returns>
        </member>
        <member name="M:LiveSplit.Model.LiveSplitStateHelper.GetLiveSegmentDelta(LiveSplit.Model.LiveSplitState,System.Int32,System.String,LiveSplit.Model.TimingMethod)">
            <summary>
            Gets the amount of time lost or gained on a certain split, using the live segment delta if the split is not completed yet.
            </summary>
            <param name="state">The current state.</param>
            <param name="splitNumber">The index of the split for which the delta is calculated.</param>
            <param name="comparison">The comparison that you are comparing with.</param>
            <param name="method">The timing method that you are using.</param>
            <returns>Returns the segment delta for a certain split, returning the live segment delta if the split is not completed yet.</returns>
        </member>
        <member name="M:LiveSplit.Model.LiveSplitStateHelper.CheckLiveDelta(LiveSplit.Model.LiveSplitState,System.Boolean,System.String,LiveSplit.Model.TimingMethod)">
            <summary>
            Checks whether the live segment should now be shown.
            </summary>
            <param name="state">The current state.</param>
            <param name="splitDelta">Specifies whether to return a split delta rather than a segment delta and to start showing the live segment once you are behind.</param>
            <param name="comparison">The comparison that you are comparing with.</param>
            <param name="method">The timing method that you are using.</param>
            <returns>Returns the current live delta.</returns>
        </member>
        <member name="M:LiveSplit.Model.LiveSplitStateHelper.GetSplitColor(LiveSplit.Model.LiveSplitState,System.Nullable{System.TimeSpan},System.Int32,System.Boolean,System.Boolean,System.String,LiveSplit.Model.TimingMethod)">
            <summary>
            Chooses a split color from the Layout Settings based on the current run.
            </summary>
            <param name="state">The current state.</param>
            <param name="timeDifference">The delta that you want to find a color for.</param>
            <param name="splitNumber">The split number that is associated with this delta.</param>
            <param name="showSegmentDeltas">Can show ahead gaining and behind losing colors if true.</param>
            <param name="showBestSegments">Can show the best segment color if true.</param>
            <param name="comparison">The comparison that you are comparing this delta to.</param>
            <param name="method">The timing method of this delta.</param>
            <returns>Returns the chosen color.</returns>
        </member>
        <member name="M:LiveSplit.Model.LiveSplitStateHelper.CheckBestSegment(LiveSplit.Model.LiveSplitState,System.Int32,LiveSplit.Model.TimingMethod)">
            <summary>
            Calculates whether or not the Split Times for the indicated split qualify as a Best Segment.
            </summary>
            <param name="state">The current state.</param>
            <param name="splitNumber">The split to check.</param>
            <param name="method">The timing method to use.</param>
            <returns>Returns whether or not the indicated split is a Best Segment.</returns>
        </member>
        <member name="T:LiveSplit.Model.Run">
            <summary>
            Describes a run for a game with all the splits and times.
            </summary>
        </member>
        <member name="F:LiveSplit.Model.Run.PersonalBestComparisonName">
            <summary>
            The name of the comparison used to save your Personal Best splits.
            </summary>
        </member>
        <member name="P:LiveSplit.Model.Run.InternalList">
            <summary>
            This is the internal list being used to save the segments, which the run is a facade to.
            </summary>
        </member>
        <member name="P:LiveSplit.Model.Run.GameIcon">
            <summary>
            Gets or sets the icon of the game the run is for.
            </summary>
        </member>
        <member name="P:LiveSplit.Model.Run.GameName">
            <summary>
            Gets or sets the name of the game the run is for.
            </summary>
        </member>
        <member name="P:LiveSplit.Model.Run.CategoryName">
            <summary>
            Gets or sets the category of the run.
            </summary>
        </member>
        <member name="P:LiveSplit.Model.Run.Offset">
            <summary>
            Gets or sets the time where the timer starts at.
            <remarks>This can be both a negative time as well to simulate a countdown.</remarks>
            </summary>
        </member>
        <member name="P:LiveSplit.Model.Run.AttemptCount">
            <summary>
            Gets or sets the amount of times the run has been started.
            </summary>
        </member>
        <member name="P:LiveSplit.Model.Run.AttemptHistory">
            <summary>
            
            </summary>
        </member>
        <member name="T:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyEventID">
            <summary>
            Describes the event that has occurred. 
            Typically, only one event is specified at a time. 
            If more than one event is specified, the values contained 
            in the <i>dwItem1</i> and <i>dwItem2</i> 
            parameters must be the same, respectively, for all specified events. 
            This parameter can be one or more of the following values. 
            </summary>
            <remarks>
            <para><b>Windows NT/2000/XP:</b> <i>dwItem2</i> contains the index 
            in the system image list that has changed. 
            <i>dwItem1</i> is not used and should be <see langword="null"/>.</para>
            <para><b>Windows 95/98:</b> <i>dwItem1</i> contains the index 
            in the system image list that has changed. 
            <i>dwItem2</i> is not used and should be <see langword="null"/>.</para>
            </remarks>
        </member>
        <member name="F:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyEventID.SHCNE_ALLEVENTS">
            <summary>
            All events have occurred. 
            </summary>
        </member>
        <member name="F:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyEventID.SHCNE_ASSOCCHANGED">
            <summary>
            A file type association has changed. <see cref="F:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyFlags.SHCNF_IDLIST"/> 
            must be specified in the <i>uFlags</i> parameter. 
            <i>dwItem1</i> and <i>dwItem2</i> are not used and must be <see langword="null"/>. 
            </summary>
        </member>
        <member name="F:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyEventID.SHCNE_ATTRIBUTES">
            <summary>
            The attributes of an item or folder have changed. 
            <see cref="F:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyFlags.SHCNF_IDLIST"/> or 
            <see cref="!:HChangeNotifyFlags.SHCNF_PATH"/> must be specified in <i>uFlags</i>. 
            <i>dwItem1</i> contains the item or folder that has changed. 
            <i>dwItem2</i> is not used and should be <see langword="null"/>.
            </summary>
        </member>
        <member name="F:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyEventID.SHCNE_CREATE">
            <summary>
            A nonfolder item has been created. 
            <see cref="F:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyFlags.SHCNF_IDLIST"/> or 
            <see cref="!:HChangeNotifyFlags.SHCNF_PATH"/> must be specified in <i>uFlags</i>. 
            <i>dwItem1</i> contains the item that was created. 
            <i>dwItem2</i> is not used and should be <see langword="null"/>.
            </summary>
        </member>
        <member name="F:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyEventID.SHCNE_DELETE">
            <summary>
            A nonfolder item has been deleted. 
            <see cref="F:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyFlags.SHCNF_IDLIST"/> or 
            <see cref="!:HChangeNotifyFlags.SHCNF_PATH"/> must be specified in <i>uFlags</i>. 
            <i>dwItem1</i> contains the item that was deleted. 
            <i>dwItem2</i> is not used and should be <see langword="null"/>. 
            </summary>
        </member>
        <member name="F:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyEventID.SHCNE_DRIVEADD">
            <summary>
            A drive has been added. 
            <see cref="F:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyFlags.SHCNF_IDLIST"/> or 
            <see cref="!:HChangeNotifyFlags.SHCNF_PATH"/> must be specified in <i>uFlags</i>. 
            <i>dwItem1</i> contains the root of the drive that was added. 
            <i>dwItem2</i> is not used and should be <see langword="null"/>. 
            </summary>
        </member>
        <member name="F:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyEventID.SHCNE_DRIVEADDGUI">
            <summary>
            A drive has been added and the Shell should create a new window for the drive. 
            <see cref="F:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyFlags.SHCNF_IDLIST"/> or 
            <see cref="!:HChangeNotifyFlags.SHCNF_PATH"/> must be specified in <i>uFlags</i>. 
            <i>dwItem1</i> contains the root of the drive that was added. 
            <i>dwItem2</i> is not used and should be <see langword="null"/>. 
            </summary>
        </member>
        <member name="F:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyEventID.SHCNE_DRIVEREMOVED">
            <summary>
            A drive has been removed. <see cref="F:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyFlags.SHCNF_IDLIST"/> or 
            <see cref="!:HChangeNotifyFlags.SHCNF_PATH"/> must be specified in <i>uFlags</i>. 
            <i>dwItem1</i> contains the root of the drive that was removed.
            <i>dwItem2</i> is not used and should be <see langword="null"/>. 
            </summary>
        </member>
        <member name="F:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyEventID.SHCNE_EXTENDED_EVENT">
            <summary>
            Not currently used. 
            </summary>
        </member>
        <member name="F:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyEventID.SHCNE_FREESPACE">
            <summary>
            The amount of free space on a drive has changed. 
            <see cref="F:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyFlags.SHCNF_IDLIST"/> or 
            <see cref="!:HChangeNotifyFlags.SHCNF_PATH"/> must be specified in <i>uFlags</i>. 
            <i>dwItem1</i> contains the root of the drive on which the free space changed.
            <i>dwItem2</i> is not used and should be <see langword="null"/>. 
            </summary>
        </member>
        <member name="F:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyEventID.SHCNE_MEDIAINSERTED">
            <summary>
            Storage media has been inserted into a drive. 
            <see cref="F:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyFlags.SHCNF_IDLIST"/> or 
            <see cref="!:HChangeNotifyFlags.SHCNF_PATH"/> must be specified in <i>uFlags</i>. 
            <i>dwItem1</i> contains the root of the drive that contains the new media. 
            <i>dwItem2</i> is not used and should be <see langword="null"/>. 
            </summary>
        </member>
        <member name="F:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyEventID.SHCNE_MEDIAREMOVED">
            <summary>
            Storage media has been removed from a drive. 
            <see cref="F:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyFlags.SHCNF_IDLIST"/> or 
            <see cref="!:HChangeNotifyFlags.SHCNF_PATH"/> must be specified in <i>uFlags</i>. 
            <i>dwItem1</i> contains the root of the drive from which the media was removed. 
            <i>dwItem2</i> is not used and should be <see langword="null"/>. 
            </summary>
        </member>
        <member name="F:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyEventID.SHCNE_MKDIR">
            <summary>
            A folder has been created. <see cref="F:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyFlags.SHCNF_IDLIST"/> 
            or <see cref="!:HChangeNotifyFlags.SHCNF_PATH"/> must be specified in <i>uFlags</i>. 
            <i>dwItem1</i> contains the folder that was created. 
            <i>dwItem2</i> is not used and should be <see langword="null"/>. 
            </summary>
        </member>
        <member name="F:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyEventID.SHCNE_NETSHARE">
            <summary>
            A folder on the local computer is being shared via the network. 
            <see cref="F:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyFlags.SHCNF_IDLIST"/> or 
            <see cref="!:HChangeNotifyFlags.SHCNF_PATH"/> must be specified in <i>uFlags</i>. 
            <i>dwItem1</i> contains the folder that is being shared. 
            <i>dwItem2</i> is not used and should be <see langword="null"/>. 
            </summary>
        </member>
        <member name="F:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyEventID.SHCNE_NETUNSHARE">
            <summary>
            A folder on the local computer is no longer being shared via the network. 
            <see cref="F:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyFlags.SHCNF_IDLIST"/> or 
            <see cref="!:HChangeNotifyFlags.SHCNF_PATH"/> must be specified in <i>uFlags</i>. 
            <i>dwItem1</i> contains the folder that is no longer being shared. 
            <i>dwItem2</i> is not used and should be <see langword="null"/>. 
            </summary>
        </member>
        <member name="F:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyEventID.SHCNE_RENAMEFOLDER">
            <summary>
            The name of a folder has changed. 
            <see cref="F:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyFlags.SHCNF_IDLIST"/> or 
            <see cref="!:HChangeNotifyFlags.SHCNF_PATH"/> must be specified in <i>uFlags</i>. 
            <i>dwItem1</i> contains the previous pointer to an item identifier list (PIDL) or name of the folder. 
            <i>dwItem2</i> contains the new PIDL or name of the folder. 
            </summary>
        </member>
        <member name="F:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyEventID.SHCNE_RENAMEITEM">
            <summary>
            The name of a nonfolder item has changed. 
            <see cref="F:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyFlags.SHCNF_IDLIST"/> or 
            <see cref="!:HChangeNotifyFlags.SHCNF_PATH"/> must be specified in <i>uFlags</i>. 
            <i>dwItem1</i> contains the previous PIDL or name of the item. 
            <i>dwItem2</i> contains the new PIDL or name of the item. 
            </summary>
        </member>
        <member name="F:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyEventID.SHCNE_RMDIR">
            <summary>
            A folder has been removed. 
            <see cref="F:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyFlags.SHCNF_IDLIST"/> or 
            <see cref="!:HChangeNotifyFlags.SHCNF_PATH"/> must be specified in <i>uFlags</i>. 
            <i>dwItem1</i> contains the folder that was removed. 
            <i>dwItem2</i> is not used and should be <see langword="null"/>. 
            </summary>
        </member>
        <member name="F:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyEventID.SHCNE_SERVERDISCONNECT">
            <summary>
            The computer has disconnected from a server. 
            <see cref="F:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyFlags.SHCNF_IDLIST"/> or 
            <see cref="!:HChangeNotifyFlags.SHCNF_PATH"/> must be specified in <i>uFlags</i>. 
            <i>dwItem1</i> contains the server from which the computer was disconnected. 
            <i>dwItem2</i> is not used and should be <see langword="null"/>. 
            </summary>
        </member>
        <member name="F:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyEventID.SHCNE_UPDATEDIR">
            <summary>
            The contents of an existing folder have changed, 
            but the folder still exists and has not been renamed. 
            <see cref="F:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyFlags.SHCNF_IDLIST"/> or 
            <see cref="!:HChangeNotifyFlags.SHCNF_PATH"/> must be specified in <i>uFlags</i>. 
            <i>dwItem1</i> contains the folder that has changed. 
            <i>dwItem2</i> is not used and should be <see langword="null"/>. 
            If a folder has been created, deleted, or renamed, use SHCNE_MKDIR, SHCNE_RMDIR, or 
            SHCNE_RENAMEFOLDER, respectively, instead. 
            </summary>
        </member>
        <member name="F:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyEventID.SHCNE_UPDATEIMAGE">
            <summary>
            An image in the system image list has changed. 
            <see cref="F:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyFlags.SHCNF_DWORD"/> must be specified in <i>uFlags</i>. 
            </summary>
        </member>
        <member name="T:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyFlags">
            <summary>
            Flags that indicate the meaning of the <i>dwItem1</i> and <i>dwItem2</i> parameters. 
            The uFlags parameter must be one of the following values.
            </summary>
        </member>
        <member name="F:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyFlags.SHCNF_DWORD">
            <summary>
            The <i>dwItem1</i> and <i>dwItem2</i> parameters are DWORD values. 
            </summary>
        </member>
        <member name="F:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyFlags.SHCNF_IDLIST">
            <summary>
            <i>dwItem1</i> and <i>dwItem2</i> are the addresses of ITEMIDLIST structures that 
            represent the item(s) affected by the change. 
            Each ITEMIDLIST must be relative to the desktop folder. 
            </summary>
        </member>
        <member name="F:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyFlags.SHCNF_PATHA">
            <summary>
            <i>dwItem1</i> and <i>dwItem2</i> are the addresses of null-terminated strings of 
            maximum length MAX_PATH that contain the full path names 
            of the items affected by the change. 
            </summary>
        </member>
        <member name="F:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyFlags.SHCNF_PATHW">
            <summary>
            <i>dwItem1</i> and <i>dwItem2</i> are the addresses of null-terminated strings of 
            maximum length MAX_PATH that contain the full path names 
            of the items affected by the change. 
            </summary>
        </member>
        <member name="F:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyFlags.SHCNF_PRINTERA">
            <summary>
            <i>dwItem1</i> and <i>dwItem2</i> are the addresses of null-terminated strings that 
            represent the friendly names of the printer(s) affected by the change. 
            </summary>
        </member>
        <member name="F:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyFlags.SHCNF_PRINTERW">
            <summary>
            <i>dwItem1</i> and <i>dwItem2</i> are the addresses of null-terminated strings that 
            represent the friendly names of the printer(s) affected by the change. 
            </summary>
        </member>
        <member name="F:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyFlags.SHCNF_FLUSH">
            <summary>
            The function should not return until the notification 
            has been delivered to all affected components. 
            As this flag modifies other data-type flags, it cannot by used by itself.
            </summary>
        </member>
        <member name="F:LiveSplit.Options.FiletypeRegistryHelper.HChangeNotifyFlags.SHCNF_FLUSHNOWAIT">
            <summary>
            The function should begin delivering notifications to all affected components 
            but should return as soon as the notification process has begun. 
            As this flag modifies other data-type flags, it cannot by used by itself.
            </summary>
        </member>
        <member name="P:LiveSplit.TimeFormatters.GeneralTimeFormatter.NullFormat">
            <summary>
            How to display null times
            </summary>
        </member>
        <member name="P:LiveSplit.TimeFormatters.GeneralTimeFormatter.ShowDays">
            <summary>
            If true, for example show "1d 23:59:10" instead of "47:59:10". For durations of 24 hours or more, 
            </summary>
        </member>
        <member name="P:LiveSplit.TimeFormatters.GeneralTimeFormatter.ShowPlus">
            <summary>
            If true, include a "+" for positive times (excluding zero)
            </summary>
        </member>
        <member name="P:LiveSplit.TimeFormatters.GeneralTimeFormatter.DropDecimals">
            <summary>
            If true, don't display decimals if absolute time is 1 minute or more
            </summary>
        </member>
        <member name="P:LiveSplit.TimeFormatters.GeneralTimeFormatter.AutomaticPrecision">
            <summary>
            If true, don't display trailing zero demical places
            </summary>
        </member>
        <member name="F:LiveSplit.TimeFormatters.DigitsFormat.SingleDigitSeconds">
            `1`
        </member>
        <member name="F:LiveSplit.TimeFormatters.DigitsFormat.DoubleDigitSeconds">
            `01`
        </member>
        <member name="F:LiveSplit.TimeFormatters.DigitsFormat.SingleDigitMinutes">
            `0:01`
        </member>
        <member name="F:LiveSplit.TimeFormatters.DigitsFormat.DoubleDigitMinutes">
            `00:01`
        </member>
        <member name="F:LiveSplit.TimeFormatters.DigitsFormat.SingleDigitHours">
            `0:00:01`
        </member>
        <member name="F:LiveSplit.TimeFormatters.DigitsFormat.DoubleDigitHours">
            `00:00:01`
        </member>
        <member name="P:LiveSplit.UI.Components.IComponentFactory.ComponentName">
            <summary>
            Returns the name of the component.
            </summary>
        </member>
        <member name="P:LiveSplit.UI.Components.IComponentFactory.Description">
            <summary>
            Returns a description of the component.
            </summary>
        </member>
        <member name="P:LiveSplit.UI.Components.IComponentFactory.Category">
            <summary>
            Returns the category of the component.
            </summary>
        </member>
        <member name="M:LiveSplit.UI.Components.IComponentFactory.Create(LiveSplit.Model.LiveSplitState)">
            <summary>
            Constructs the component.
            </summary>
            <param name="state">The state.</param>
            <returns>The component</returns>
        </member>
        <member name="P:LiveSplit.UI.Components.IComponent.ComponentName">
            <summary>
            Returns the name of the component.
            </summary>
        </member>
        <member name="P:LiveSplit.UI.Components.IComponent.HorizontalWidth">
            <summary>
            Returns the width of the component if it is rendered horizontally.
            </summary>
        </member>
        <member name="P:LiveSplit.UI.Components.IComponent.MinimumHeight">
            <summary>
            Returns the minimum height where the component
            still looks visually pleasing.
            </summary>
        </member>
        <member name="P:LiveSplit.UI.Components.IComponent.VerticalHeight">
            <summary>
            Returns the height of the component if it is rendered vertically.
            </summary>
        </member>
        <member name="P:LiveSplit.UI.Components.IComponent.MinimumWidth">
            <summary>
            Returns the minimum width where the component
            still looks visually pleasing.
            </summary>
        </member>
        <member name="P:LiveSplit.UI.Components.IComponent.PaddingTop">
            <summary>
            Returns the intrinsic padding of the component.
            <remarks>Padding is combined if two components with padding are next to each other.</remarks>
            </summary>
        </member>
        <member name="P:LiveSplit.UI.Components.IComponent.ContextMenuControls">
            <summary>
            Returns a Dictionary with all the controls available
            in the context menu for controlling the component.
            </summary>
        </member>
        <member name="M:LiveSplit.UI.Components.IComponent.DrawHorizontal(System.Drawing.Graphics,LiveSplit.Model.LiveSplitState,System.Single,System.Drawing.Region)">
            <summary>
            Draws the contents of the component horizontally onto the window.
            </summary>
            <param name="g">The graphics object used for drawing</param>
            <param name="state">Represents the current state of LiveSplit</param>
            <param name="height">The height of the window and the component</param>
            <param name="clipRegion">The rectangle on the form that is being redrawn for this paint event.</param>
        </member>
        <member name="M:LiveSplit.UI.Components.IComponent.DrawVertical(System.Drawing.Graphics,LiveSplit.Model.LiveSplitState,System.Single,System.Drawing.Region)">
            <summary>
            Draws the contents of the component vertically onto the window.
            </summary>
            <param name="g">The graphics object used for drawing</param>
            <param name="state">Represents the current state of LiveSplit</param>
            <param name="width">The width of the window and the component</param>
            <param name="clipRegion">The rectangle on the form that is being redrawn for this paint event.</param>
        </member>
        <member name="M:LiveSplit.UI.Components.IComponent.GetSettingsControl(LiveSplit.UI.LayoutMode)">
            <summary>
            Shows a dialog where the user can configure the component.
            </summary>
            <returns>Returns in what way the dialog was closed.</returns>
        </member>
        <member name="M:LiveSplit.UI.Components.IComponent.GetSettings(System.Xml.XmlDocument)">
            <summary>
            Returns the XML serialization of the component's settings.
            </summary>
            <param name="document">The XML document.</param>
            <returns> Returns the XML serialization of the component's settings.</returns>
        </member>
        <member name="M:LiveSplit.UI.Components.IComponent.SetSettings(System.Xml.XmlNode)">
            <summary>
            Sets the settings of the component based on the serialized version of the settings.
            </summary>
            <param name="settings">A serialized version of the settings that need to be set.</param>
        </member>
        <member name="M:LiveSplit.UI.Components.IComponent.Update(LiveSplit.UI.IInvalidator,LiveSplit.Model.LiveSplitState,System.Single,System.Single,LiveSplit.UI.LayoutMode)">
            <summary>
            Updates the component, checks if it has changed, and invalidates the necessary region if it needs to be redrawn.
            </summary>
            <param name="invalidator">An invalidator object. Used to invalidate a specific region on the form.</param>
            <param name="state">Represents the current state of LiveSplit</param>
            <param name="width">The width of the region that needs to be invalidated.</param>
            <param name="height">The height of the region that needs to be invalidated.</param>
            <param name="mode">The Layout Mode (Horizontal or Vertical)</param>
        </member>
        <member name="T:LiveSplit.Updates.GitInfo">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:LiveSplit.Updates.GitInfo.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:LiveSplit.Updates.GitInfo.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:LiveSplit.Updates.GitInfo.branch">
             <summary>
               Looks up a localized string similar to pr/1386
            .
             </summary>
        </member>
        <member name="P:LiveSplit.Updates.GitInfo.revision">
             <summary>
               Looks up a localized string similar to 9b51b37a8be6f209c2c3874554b798e841657609
            .
             </summary>
        </member>
        <member name="P:LiveSplit.Updates.GitInfo.version">
             <summary>
               Looks up a localized string similar to 1.7.4-577-g9b51b37-dirty
            .
             </summary>
        </member>
        <member name="M:LiveSplit.Updates.ScrollableMessageBox.Show(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="text">text inside the message box</param>
            <param name="caption">caption on the title bar</param>
        </member>
        <member name="F:LiveSplit.Updates.ScrollableMessageBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:LiveSplit.Updates.ScrollableMessageBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:LiveSplit.Updates.ScrollableMessageBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:LiveSplit.Web.Share.TwitchGameResolveDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:LiveSplit.Web.Share.TwitchGameResolveDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:LiveSplit.Web.Share.TwitchGameResolveDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:LiveSplit.Web.Share.TwitchOAuthForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:LiveSplit.Web.Share.TwitchOAuthForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:LiveSplit.Web.Share.TwitchOAuthForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:LiveSplit.Web.Share.TwitterOAuthForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:LiveSplit.Web.Share.TwitterOAuthForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:LiveSplit.Web.Share.TwitterOAuthForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:LiveSplit.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:LiveSplit.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:LiveSplit.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:LiveSplit.Resources.LlanfairLoader">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="T:LiveSplitCore.AnalysisRef">
            <summary>
            The analysis module provides a variety of functions for calculating
            information about runs.
            </summary>
        </member>
        <member name="T:LiveSplitCore.AnalysisRefMut">
            <summary>
            The analysis module provides a variety of functions for calculating
            information about runs.
            </summary>
        </member>
        <member name="T:LiveSplitCore.Analysis">
            <summary>
            The analysis module provides a variety of functions for calculating
            information about runs.
            </summary>
        </member>
        <member name="M:LiveSplitCore.Analysis.CalculateSumOfBest(LiveSplitCore.RunRef,System.Boolean,System.Boolean,System.Byte)">
            <summary>
            Calculates the Sum of Best Segments for the timing method provided. This is
            the fastest time possible to complete a run of a category, based on
            information collected from all the previous attempts. This often matches up
            with the sum of the best segment times of all the segments, but that may not
            always be the case, as skipped segments may introduce combined segments that
            may be faster than the actual sum of their best segment times. The name is
            therefore a bit misleading, but sticks around for historical reasons. You
            can choose to do a simple calculation instead, which excludes the Segment
            History from the calculation process. If there's an active attempt, you can
            choose to take it into account as well. Can return null.
            </summary>
        </member>
        <member name="M:LiveSplitCore.Analysis.CalculateTotalPlaytimeForRun(LiveSplitCore.RunRef)">
            <summary>
            Calculates the total playtime of the passed Run.
            </summary>
        </member>
        <member name="M:LiveSplitCore.Analysis.CalculateTotalPlaytimeForTimer(LiveSplitCore.TimerRef)">
            <summary>
            Calculates the total playtime of the passed Timer.
            </summary>
        </member>
        <member name="T:LiveSplitCore.AtomicDateTimeRef">
            <summary>
            An Atomic Date Time represents a UTC Date Time that tries to be as close to
            an atomic clock as possible.
            </summary>
        </member>
        <member name="M:LiveSplitCore.AtomicDateTimeRef.IsSynchronized">
            <summary>
            Represents whether the date time is actually properly derived from an
            atomic clock. If the synchronization with the atomic clock didn't happen
            yet or failed, this is set to false.
            </summary>
        </member>
        <member name="M:LiveSplitCore.AtomicDateTimeRef.ToRfc2822">
            <summary>
            Converts this atomic date time into a RFC 2822 formatted date time.
            </summary>
        </member>
        <member name="M:LiveSplitCore.AtomicDateTimeRef.ToRfc3339">
            <summary>
            Converts this atomic date time into a RFC 3339 formatted date time.
            </summary>
        </member>
        <member name="T:LiveSplitCore.AtomicDateTimeRefMut">
            <summary>
            An Atomic Date Time represents a UTC Date Time that tries to be as close to
            an atomic clock as possible.
            </summary>
        </member>
        <member name="T:LiveSplitCore.AtomicDateTime">
            <summary>
            An Atomic Date Time represents a UTC Date Time that tries to be as close to
            an atomic clock as possible.
            </summary>
        </member>
        <member name="T:LiveSplitCore.AttemptRef">
            <summary>
            An Attempt describes information about an attempt to run a specific category
            by a specific runner in the past. Every time a new attempt is started and
            then reset, an Attempt describing general information about it is created.
            </summary>
        </member>
        <member name="M:LiveSplitCore.AttemptRef.Index">
            <summary>
            Accesses the unique index of the attempt. This index is unique for the
            Run, not for all of them.
            </summary>
        </member>
        <member name="M:LiveSplitCore.AttemptRef.Time">
            <summary>
            Accesses the split time of the last segment. If the attempt got reset
            early and didn't finish, this may be empty.
            </summary>
        </member>
        <member name="M:LiveSplitCore.AttemptRef.PauseTime">
            <summary>
            Accesses the amount of time the attempt has been paused for. If it is not
            known, this returns null. This means that it may not necessarily be
            possible to differentiate whether a Run has not been paused or it simply
            wasn't stored.
            </summary>
        </member>
        <member name="M:LiveSplitCore.AttemptRef.Started">
            <summary>
            Accesses the point in time the attempt was started at. This returns null
            if this information is not known.
            </summary>
        </member>
        <member name="M:LiveSplitCore.AttemptRef.Ended">
            <summary>
            Accesses the point in time the attempt was ended at. This returns null if
            this information is not known.
            </summary>
        </member>
        <member name="T:LiveSplitCore.AttemptRefMut">
            <summary>
            An Attempt describes information about an attempt to run a specific category
            by a specific runner in the past. Every time a new attempt is started and
            then reset, an Attempt describing general information about it is created.
            </summary>
        </member>
        <member name="T:LiveSplitCore.Attempt">
            <summary>
            An Attempt describes information about an attempt to run a specific category
            by a specific runner in the past. Every time a new attempt is started and
            then reset, an Attempt describing general information about it is created.
            </summary>
        </member>
        <member name="T:LiveSplitCore.BlankSpaceComponentRef">
            <summary>
            The Blank Space Component is simply an empty component that doesn't show
            anything other than a background. It mostly serves as padding between other
            components.
            </summary>
        </member>
        <member name="T:LiveSplitCore.BlankSpaceComponentRefMut">
            <summary>
            The Blank Space Component is simply an empty component that doesn't show
            anything other than a background. It mostly serves as padding between other
            components.
            </summary>
        </member>
        <member name="M:LiveSplitCore.BlankSpaceComponentRefMut.StateAsJson(LiveSplitCore.TimerRef)">
            <summary>
            Encodes the component's state information as JSON.
            </summary>
        </member>
        <member name="M:LiveSplitCore.BlankSpaceComponentRefMut.State(LiveSplitCore.TimerRef)">
            <summary>
            Calculates the component's state based on the timer provided.
            </summary>
        </member>
        <member name="T:LiveSplitCore.BlankSpaceComponent">
            <summary>
            The Blank Space Component is simply an empty component that doesn't show
            anything other than a background. It mostly serves as padding between other
            components.
            </summary>
        </member>
        <member name="M:LiveSplitCore.BlankSpaceComponent.#ctor">
            <summary>
            Creates a new Blank Space Component.
            </summary>
        </member>
        <member name="M:LiveSplitCore.BlankSpaceComponent.IntoGeneric">
            <summary>
            Converts the component into a generic component suitable for using with a
            layout.
            </summary>
        </member>
        <member name="T:LiveSplitCore.BlankSpaceComponentStateRef">
            <summary>
            The state object describes the information to visualize for this component.
            </summary>
        </member>
        <member name="M:LiveSplitCore.BlankSpaceComponentStateRef.Size">
            <summary>
            The size of the component.
            </summary>
        </member>
        <member name="T:LiveSplitCore.BlankSpaceComponentStateRefMut">
            <summary>
            The state object describes the information to visualize for this component.
            </summary>
        </member>
        <member name="T:LiveSplitCore.BlankSpaceComponentState">
            <summary>
            The state object describes the information to visualize for this component.
            </summary>
        </member>
        <member name="T:LiveSplitCore.ComponentRef">
            <summary>
            A Component provides information about a run in a way that is easy to
            visualize. This type can store any of the components provided by this crate.
            </summary>
        </member>
        <member name="T:LiveSplitCore.ComponentRefMut">
            <summary>
            A Component provides information about a run in a way that is easy to
            visualize. This type can store any of the components provided by this crate.
            </summary>
        </member>
        <member name="T:LiveSplitCore.Component">
            <summary>
            A Component provides information about a run in a way that is easy to
            visualize. This type can store any of the components provided by this crate.
            </summary>
        </member>
        <member name="T:LiveSplitCore.CurrentComparisonComponentRef">
            <summary>
            The Current Comparison Component is a component that shows the name of the
            comparison that is currently selected to be compared against.
            </summary>
        </member>
        <member name="T:LiveSplitCore.CurrentComparisonComponentRefMut">
            <summary>
            The Current Comparison Component is a component that shows the name of the
            comparison that is currently selected to be compared against.
            </summary>
        </member>
        <member name="M:LiveSplitCore.CurrentComparisonComponentRefMut.StateAsJson(LiveSplitCore.TimerRef)">
            <summary>
            Encodes the component's state information as JSON.
            </summary>
        </member>
        <member name="M:LiveSplitCore.CurrentComparisonComponentRefMut.State(LiveSplitCore.TimerRef)">
            <summary>
            Calculates the component's state based on the timer provided.
            </summary>
        </member>
        <member name="T:LiveSplitCore.CurrentComparisonComponent">
            <summary>
            The Current Comparison Component is a component that shows the name of the
            comparison that is currently selected to be compared against.
            </summary>
        </member>
        <member name="M:LiveSplitCore.CurrentComparisonComponent.#ctor">
            <summary>
            Creates a new Current Comparison Component.
            </summary>
        </member>
        <member name="M:LiveSplitCore.CurrentComparisonComponent.IntoGeneric">
            <summary>
            Converts the component into a generic component suitable for using with a
            layout.
            </summary>
        </member>
        <member name="T:LiveSplitCore.CurrentPaceComponentRef">
            <summary>
            The Current Pace Component is a component that shows a prediction of the
            current attempt's final time, if the current attempt's pace matches the
            chosen comparison for the remainder of the run.
            </summary>
        </member>
        <member name="T:LiveSplitCore.CurrentPaceComponentRefMut">
            <summary>
            The Current Pace Component is a component that shows a prediction of the
            current attempt's final time, if the current attempt's pace matches the
            chosen comparison for the remainder of the run.
            </summary>
        </member>
        <member name="M:LiveSplitCore.CurrentPaceComponentRefMut.StateAsJson(LiveSplitCore.TimerRef)">
            <summary>
            Encodes the component's state information as JSON.
            </summary>
        </member>
        <member name="M:LiveSplitCore.CurrentPaceComponentRefMut.State(LiveSplitCore.TimerRef)">
            <summary>
            Calculates the component's state based on the timer provided.
            </summary>
        </member>
        <member name="T:LiveSplitCore.CurrentPaceComponent">
            <summary>
            The Current Pace Component is a component that shows a prediction of the
            current attempt's final time, if the current attempt's pace matches the
            chosen comparison for the remainder of the run.
            </summary>
        </member>
        <member name="M:LiveSplitCore.CurrentPaceComponent.#ctor">
            <summary>
            Creates a new Current Pace Component.
            </summary>
        </member>
        <member name="M:LiveSplitCore.CurrentPaceComponent.IntoGeneric">
            <summary>
            Converts the component into a generic component suitable for using with a
            layout.
            </summary>
        </member>
        <member name="T:LiveSplitCore.DeltaComponentRef">
            <summary>
            The Delta Component is a component that shows the how far ahead or behind
            the current attempt is compared to the chosen comparison.
            </summary>
        </member>
        <member name="T:LiveSplitCore.DeltaComponentRefMut">
            <summary>
            The Delta Component is a component that shows the how far ahead or behind
            the current attempt is compared to the chosen comparison.
            </summary>
        </member>
        <member name="M:LiveSplitCore.DeltaComponentRefMut.StateAsJson(LiveSplitCore.TimerRef,LiveSplitCore.GeneralLayoutSettingsRef)">
            <summary>
            Encodes the component's state information as JSON.
            </summary>
        </member>
        <member name="M:LiveSplitCore.DeltaComponentRefMut.State(LiveSplitCore.TimerRef,LiveSplitCore.GeneralLayoutSettingsRef)">
            <summary>
            Calculates the component's state based on the timer and the layout
            settings provided.
            </summary>
        </member>
        <member name="T:LiveSplitCore.DeltaComponent">
            <summary>
            The Delta Component is a component that shows the how far ahead or behind
            the current attempt is compared to the chosen comparison.
            </summary>
        </member>
        <member name="M:LiveSplitCore.DeltaComponent.#ctor">
            <summary>
            Creates a new Delta Component.
            </summary>
        </member>
        <member name="M:LiveSplitCore.DeltaComponent.IntoGeneric">
            <summary>
            Converts the component into a generic component suitable for using with a
            layout.
            </summary>
        </member>
        <member name="T:LiveSplitCore.DetailedTimerComponentRef">
            <summary>
            The Detailed Timer Component is a component that shows two timers, one for
            the total time of the current attempt and one showing the time of just the
            current segment. Other information, like segment times of up to two
            comparisons, the segment icon, and the segment's name, can also be shown.
            </summary>
        </member>
        <member name="T:LiveSplitCore.DetailedTimerComponentRefMut">
            <summary>
            The Detailed Timer Component is a component that shows two timers, one for
            the total time of the current attempt and one showing the time of just the
            current segment. Other information, like segment times of up to two
            comparisons, the segment icon, and the segment's name, can also be shown.
            </summary>
        </member>
        <member name="M:LiveSplitCore.DetailedTimerComponentRefMut.StateAsJson(LiveSplitCore.TimerRef,LiveSplitCore.GeneralLayoutSettingsRef)">
            <summary>
            Encodes the component's state information as JSON.
            </summary>
        </member>
        <member name="M:LiveSplitCore.DetailedTimerComponentRefMut.State(LiveSplitCore.TimerRef,LiveSplitCore.GeneralLayoutSettingsRef)">
            <summary>
            Calculates the component's state based on the timer and layout settings
            provided.
            </summary>
        </member>
        <member name="T:LiveSplitCore.DetailedTimerComponent">
            <summary>
            The Detailed Timer Component is a component that shows two timers, one for
            the total time of the current attempt and one showing the time of just the
            current segment. Other information, like segment times of up to two
            comparisons, the segment icon, and the segment's name, can also be shown.
            </summary>
        </member>
        <member name="M:LiveSplitCore.DetailedTimerComponent.#ctor">
            <summary>
            Creates a new Detailed Timer Component.
            </summary>
        </member>
        <member name="M:LiveSplitCore.DetailedTimerComponent.IntoGeneric">
            <summary>
            Converts the component into a generic component suitable for using with a
            layout.
            </summary>
        </member>
        <member name="T:LiveSplitCore.DetailedTimerComponentStateRef">
            <summary>
            The state object describes the information to visualize for this component.
            </summary>
        </member>
        <member name="M:LiveSplitCore.DetailedTimerComponentStateRef.TimerTime">
            <summary>
            The time shown by the component's main timer without the fractional part.
            </summary>
        </member>
        <member name="M:LiveSplitCore.DetailedTimerComponentStateRef.TimerFraction">
            <summary>
            The fractional part of the time shown by the main timer (including the dot).
            </summary>
        </member>
        <member name="M:LiveSplitCore.DetailedTimerComponentStateRef.TimerSemanticColor">
            <summary>
            The semantic coloring information the main timer's time carries.
            </summary>
        </member>
        <member name="M:LiveSplitCore.DetailedTimerComponentStateRef.SegmentTimerTime">
            <summary>
            The time shown by the component's segment timer without the fractional part.
            </summary>
        </member>
        <member name="M:LiveSplitCore.DetailedTimerComponentStateRef.SegmentTimerFraction">
            <summary>
            The fractional part of the time shown by the segment timer (including the
            dot).
            </summary>
        </member>
        <member name="M:LiveSplitCore.DetailedTimerComponentStateRef.Comparison1Visible">
            <summary>
            Returns whether the first comparison is visible.
            </summary>
        </member>
        <member name="M:LiveSplitCore.DetailedTimerComponentStateRef.Comparison1Name">
            <summary>
            Returns the name of the first comparison. You may not call this if the first
            comparison is not visible.
            </summary>
        </member>
        <member name="M:LiveSplitCore.DetailedTimerComponentStateRef.Comparison1Time">
            <summary>
            Returns the time of the first comparison. You may not call this if the first
            comparison is not visible.
            </summary>
        </member>
        <member name="M:LiveSplitCore.DetailedTimerComponentStateRef.Comparison2Visible">
            <summary>
            Returns whether the second comparison is visible.
            </summary>
        </member>
        <member name="M:LiveSplitCore.DetailedTimerComponentStateRef.Comparison2Name">
            <summary>
            Returns the name of the second comparison. You may not call this if the
            second comparison is not visible.
            </summary>
        </member>
        <member name="M:LiveSplitCore.DetailedTimerComponentStateRef.Comparison2Time">
            <summary>
            Returns the time of the second comparison. You may not call this if the
            second comparison is not visible.
            </summary>
        </member>
        <member name="M:LiveSplitCore.DetailedTimerComponentStateRef.IconChangePtr">
            <summary>
            The data of the segment's icon. This value is only specified whenever the
            icon changes. If you explicitly want to query this value, remount the
            component. The buffer itself may be empty. This indicates that there is no
            icon.
            </summary>
        </member>
        <member name="M:LiveSplitCore.DetailedTimerComponentStateRef.IconChangeLen">
            <summary>
            The length of the data of the segment's icon.
            </summary>
        </member>
        <member name="M:LiveSplitCore.DetailedTimerComponentStateRef.SegmentName">
            <summary>
            The name of the segment. This may be null if it's not supposed to be
            visualized.
            </summary>
        </member>
        <member name="T:LiveSplitCore.DetailedTimerComponentStateRefMut">
            <summary>
            The state object describes the information to visualize for this component.
            </summary>
        </member>
        <member name="T:LiveSplitCore.DetailedTimerComponentState">
            <summary>
            The state object describes the information to visualize for this component.
            </summary>
        </member>
        <member name="T:LiveSplitCore.FuzzyListRef">
            <summary>
            With a Fuzzy List, you can implement a fuzzy searching algorithm. The list
            stores all the items that can be searched for. With the `search` method you
            can then execute the actual fuzzy search which returns a list of all the
            elements found. This can be used to implement searching in a list of games.
            </summary>
        </member>
        <member name="M:LiveSplitCore.FuzzyListRef.Search(System.String,System.Int64)">
            <summary>
            Searches for the pattern provided in the list. A list of all the
            matching elements is returned. The returned list has a maximum amount of
            elements provided to this method.
            </summary>
        </member>
        <member name="T:LiveSplitCore.FuzzyListRefMut">
            <summary>
            With a Fuzzy List, you can implement a fuzzy searching algorithm. The list
            stores all the items that can be searched for. With the `search` method you
            can then execute the actual fuzzy search which returns a list of all the
            elements found. This can be used to implement searching in a list of games.
            </summary>
        </member>
        <member name="M:LiveSplitCore.FuzzyListRefMut.Push(System.String)">
            <summary>
            Adds a new element to the list.
            </summary>
        </member>
        <member name="T:LiveSplitCore.FuzzyList">
            <summary>
            With a Fuzzy List, you can implement a fuzzy searching algorithm. The list
            stores all the items that can be searched for. With the `search` method you
            can then execute the actual fuzzy search which returns a list of all the
            elements found. This can be used to implement searching in a list of games.
            </summary>
        </member>
        <member name="M:LiveSplitCore.FuzzyList.#ctor">
            <summary>
            Creates a new Fuzzy List.
            </summary>
        </member>
        <member name="T:LiveSplitCore.GeneralLayoutSettingsRef">
            <summary>
            The general settings of the layout that apply to all components.
            </summary>
        </member>
        <member name="T:LiveSplitCore.GeneralLayoutSettingsRefMut">
            <summary>
            The general settings of the layout that apply to all components.
            </summary>
        </member>
        <member name="T:LiveSplitCore.GeneralLayoutSettings">
            <summary>
            The general settings of the layout that apply to all components.
            </summary>
        </member>
        <member name="M:LiveSplitCore.GeneralLayoutSettings.Default">
            <summary>
            Creates a default general layout settings configuration.
            </summary>
        </member>
        <member name="T:LiveSplitCore.GraphComponentRef">
            <summary>
            The Graph Component visualizes how far the current attempt has been ahead or
            behind the chosen comparison throughout the whole attempt. All the
            individual deltas are shown as points in a graph.
            </summary>
        </member>
        <member name="M:LiveSplitCore.GraphComponentRef.StateAsJson(LiveSplitCore.TimerRef,LiveSplitCore.GeneralLayoutSettingsRef)">
            <summary>
            Encodes the component's state information as JSON.
            </summary>
        </member>
        <member name="M:LiveSplitCore.GraphComponentRef.State(LiveSplitCore.TimerRef,LiveSplitCore.GeneralLayoutSettingsRef)">
            <summary>
            Calculates the component's state based on the timer and layout settings
            provided.
            </summary>
        </member>
        <member name="T:LiveSplitCore.GraphComponentRefMut">
            <summary>
            The Graph Component visualizes how far the current attempt has been ahead or
            behind the chosen comparison throughout the whole attempt. All the
            individual deltas are shown as points in a graph.
            </summary>
        </member>
        <member name="T:LiveSplitCore.GraphComponent">
            <summary>
            The Graph Component visualizes how far the current attempt has been ahead or
            behind the chosen comparison throughout the whole attempt. All the
            individual deltas are shown as points in a graph.
            </summary>
        </member>
        <member name="M:LiveSplitCore.GraphComponent.#ctor">
            <summary>
            Creates a new Graph Component.
            </summary>
        </member>
        <member name="M:LiveSplitCore.GraphComponent.IntoGeneric">
            <summary>
            Converts the component into a generic component suitable for using with a
            layout.
            </summary>
        </member>
        <member name="T:LiveSplitCore.GraphComponentStateRef">
            <summary>
            The state object describes the information to visualize for this component.
            All the coordinates are in the range 0..1.
            </summary>
        </member>
        <member name="M:LiveSplitCore.GraphComponentStateRef.PointsLen">
            <summary>
            Returns the amount of points to visualize. Connect all of them to visualize
            the graph. If the live delta is active, the last point is to be interpreted
            as a preview of the next split that is about to happen. Use the partial fill
            color to visualize the region beneath that graph segment.
            </summary>
        </member>
        <member name="M:LiveSplitCore.GraphComponentStateRef.PointX(System.Int64)">
            <summary>
            Returns the x coordinate of the point specified. You may not provide an out
            of bounds index.
            </summary>
        </member>
        <member name="M:LiveSplitCore.GraphComponentStateRef.PointY(System.Int64)">
            <summary>
            Returns the y coordinate of the point specified. You may not provide an out
            of bounds index.
            </summary>
        </member>
        <member name="M:LiveSplitCore.GraphComponentStateRef.PointIsBestSegment(System.Int64)">
            <summary>
            Describes whether the segment the point specified is visualizing achieved a
            new best segment time. Use the best segment color for it, in that case. You
            may not provide an out of bounds index.
            </summary>
        </member>
        <member name="M:LiveSplitCore.GraphComponentStateRef.HorizontalGridLinesLen">
            <summary>
            Describes how many horizontal grid lines to visualize.
            </summary>
        </member>
        <member name="M:LiveSplitCore.GraphComponentStateRef.HorizontalGridLine(System.Int64)">
            <summary>
            Accesses the y coordinate of the horizontal grid line specified. You may not
            provide an out of bounds index.
            </summary>
        </member>
        <member name="M:LiveSplitCore.GraphComponentStateRef.VerticalGridLinesLen">
            <summary>
            Describes how many vertical grid lines to visualize.
            </summary>
        </member>
        <member name="M:LiveSplitCore.GraphComponentStateRef.VerticalGridLine(System.Int64)">
            <summary>
            Accesses the x coordinate of the vertical grid line specified. You may not
            provide an out of bounds index.
            </summary>
        </member>
        <member name="M:LiveSplitCore.GraphComponentStateRef.Middle">
            <summary>
            The y coordinate that separates the region that shows the times that are
            ahead of the comparison and those that are behind.
            </summary>
        </member>
        <member name="M:LiveSplitCore.GraphComponentStateRef.IsLiveDeltaActive">
            <summary>
            If the live delta is active, the last point is to be interpreted as a
            preview of the next split that is about to happen. Use the partial fill
            color to visualize the region beneath that graph segment.
            </summary>
        </member>
        <member name="M:LiveSplitCore.GraphComponentStateRef.IsFlipped">
            <summary>
            Describes whether the graph is flipped vertically. For visualizing the
            graph, this usually doesn't need to be interpreted, as this information is
            entirely encoded into the other variables.
            </summary>
        </member>
        <member name="T:LiveSplitCore.GraphComponentStateRefMut">
            <summary>
            The state object describes the information to visualize for this component.
            All the coordinates are in the range 0..1.
            </summary>
        </member>
        <member name="T:LiveSplitCore.GraphComponentState">
            <summary>
            The state object describes the information to visualize for this component.
            All the coordinates are in the range 0..1.
            </summary>
        </member>
        <member name="T:LiveSplitCore.HotkeyConfigRef">
            <summary>
            The configuration to use for a Hotkey System. It describes with keys to use
            as hotkeys for the different actions.
            </summary>
        </member>
        <member name="M:LiveSplitCore.HotkeyConfigRef.SettingsDescriptionAsJson">
            <summary>
            Encodes generic description of the settings available for the hotkey
            configuration and their current values as JSON.
            </summary>
        </member>
        <member name="M:LiveSplitCore.HotkeyConfigRef.AsJson">
            <summary>
            Encodes the hotkey configuration as JSON.
            </summary>
        </member>
        <member name="T:LiveSplitCore.HotkeyConfigRefMut">
            <summary>
            The configuration to use for a Hotkey System. It describes with keys to use
            as hotkeys for the different actions.
            </summary>
        </member>
        <member name="M:LiveSplitCore.HotkeyConfigRefMut.SetValue(System.Int64,LiveSplitCore.SettingValue)">
            <summary>
            Sets a setting's value by its index to the given value.
            
            false is returned if a hotkey is already in use by a different action.
            
            This panics if the type of the value to be set is not compatible with the
            type of the setting's value. A panic can also occur if the index of the
            setting provided is out of bounds.
            </summary>
        </member>
        <member name="T:LiveSplitCore.HotkeyConfig">
            <summary>
            The configuration to use for a Hotkey System. It describes with keys to use
            as hotkeys for the different actions.
            </summary>
        </member>
        <member name="M:LiveSplitCore.HotkeyConfig.#ctor">
            <summary>
            Creates a new Hotkey Configuration with default settings.
            </summary>
        </member>
        <member name="M:LiveSplitCore.HotkeyConfig.ParseJson(System.String)">
            <summary>
            Parses a hotkey configuration from the given JSON description. null is
            returned if it couldn't be parsed.
            </summary>
        </member>
        <member name="M:LiveSplitCore.HotkeyConfig.ParseFileHandle(System.Int64)">
            <summary>
            Attempts to parse a hotkey configuration from a given file. null is
            returned it couldn't be parsed. This will not close the file descriptor /
            handle.
            </summary>
        </member>
        <member name="T:LiveSplitCore.HotkeySystemRef">
            <summary>
            With a Hotkey System the runner can use hotkeys on their keyboard to control
            the Timer. The hotkeys are global, so the application doesn't need to be in
            focus. The behavior of the hotkeys depends on the platform and is stubbed
            out on platforms that don't support hotkeys. You can turn off a Hotkey
            System temporarily. By default the Hotkey System is activated.
            </summary>
        </member>
        <member name="M:LiveSplitCore.HotkeySystemRef.Deactivate">
            <summary>
            Deactivates the Hotkey System. No hotkeys will go through until it gets
            activated again. If it's already deactivated, nothing happens.
            </summary>
        </member>
        <member name="M:LiveSplitCore.HotkeySystemRef.Activate">
            <summary>
            Activates a previously deactivated Hotkey System. If it's already
            active, nothing happens.
            </summary>
        </member>
        <member name="M:LiveSplitCore.HotkeySystemRef.Config">
            <summary>
            Returns the hotkey configuration currently in use by the Hotkey System.
            </summary>
        </member>
        <member name="T:LiveSplitCore.HotkeySystemRefMut">
            <summary>
            With a Hotkey System the runner can use hotkeys on their keyboard to control
            the Timer. The hotkeys are global, so the application doesn't need to be in
            focus. The behavior of the hotkeys depends on the platform and is stubbed
            out on platforms that don't support hotkeys. You can turn off a Hotkey
            System temporarily. By default the Hotkey System is activated.
            </summary>
        </member>
        <member name="M:LiveSplitCore.HotkeySystemRefMut.SetConfig(LiveSplitCore.HotkeyConfig)">
            <summary>
            Applies a new hotkey configuration to the Hotkey System. Each hotkey is
            changed to the one specified in the configuration. This operation may fail
            if you provide a hotkey configuration where a hotkey is used for multiple
            operations. Returns false if the operation failed.
            </summary>
        </member>
        <member name="T:LiveSplitCore.HotkeySystem">
            <summary>
            With a Hotkey System the runner can use hotkeys on their keyboard to control
            the Timer. The hotkeys are global, so the application doesn't need to be in
            focus. The behavior of the hotkeys depends on the platform and is stubbed
            out on platforms that don't support hotkeys. You can turn off a Hotkey
            System temporarily. By default the Hotkey System is activated.
            </summary>
        </member>
        <member name="M:LiveSplitCore.HotkeySystem.New(LiveSplitCore.SharedTimer)">
            <summary>
            Creates a new Hotkey System for a Timer with the default hotkeys.
            </summary>
        </member>
        <member name="M:LiveSplitCore.HotkeySystem.WithConfig(LiveSplitCore.SharedTimer,LiveSplitCore.HotkeyConfig)">
            <summary>
            Creates a new Hotkey System for a Timer with a custom configuration for the
            hotkeys.
            </summary>
        </member>
        <member name="T:LiveSplitCore.KeyValueComponentStateRef">
            <summary>
            The state object describes the information to visualize for a key value based component.
            </summary>
        </member>
        <member name="M:LiveSplitCore.KeyValueComponentStateRef.Key">
            <summary>
            The key to visualize.
            </summary>
        </member>
        <member name="M:LiveSplitCore.KeyValueComponentStateRef.Value">
            <summary>
            The value to visualize.
            </summary>
        </member>
        <member name="M:LiveSplitCore.KeyValueComponentStateRef.SemanticColor">
            <summary>
            The semantic coloring information the value carries.
            </summary>
        </member>
        <member name="T:LiveSplitCore.KeyValueComponentStateRefMut">
            <summary>
            The state object describes the information to visualize for a key value based component.
            </summary>
        </member>
        <member name="T:LiveSplitCore.KeyValueComponentState">
            <summary>
            The state object describes the information to visualize for a key value based component.
            </summary>
        </member>
        <member name="T:LiveSplitCore.LayoutRef">
            <summary>
            A Layout allows you to combine multiple components together to visualize a
            variety of information the runner is interested in.
            </summary>
        </member>
        <member name="M:LiveSplitCore.LayoutRef.Clone">
            <summary>
            Clones the layout.
            </summary>
        </member>
        <member name="M:LiveSplitCore.LayoutRef.SettingsAsJson">
            <summary>
            Encodes the settings of the layout as JSON.
            </summary>
        </member>
        <member name="T:LiveSplitCore.LayoutRefMut">
            <summary>
            A Layout allows you to combine multiple components together to visualize a
            variety of information the runner is interested in.
            </summary>
        </member>
        <member name="M:LiveSplitCore.LayoutRefMut.State(LiveSplitCore.TimerRef)">
            <summary>
            Calculates and returns the layout's state based on the timer provided.
            </summary>
        </member>
        <member name="M:LiveSplitCore.LayoutRefMut.StateAsJson(LiveSplitCore.TimerRef)">
            <summary>
            Calculates the layout's state based on the timer provided and encodes it as
            JSON. You can use this to visualize all of the components of a layout.
            </summary>
        </member>
        <member name="M:LiveSplitCore.LayoutRefMut.Push(LiveSplitCore.Component)">
            <summary>
            Adds a new component to the end of the layout.
            </summary>
        </member>
        <member name="M:LiveSplitCore.LayoutRefMut.ScrollUp">
            <summary>
            Scrolls up all the components in the layout that can be scrolled up.
            </summary>
        </member>
        <member name="M:LiveSplitCore.LayoutRefMut.ScrollDown">
            <summary>
            Scrolls down all the components in the layout that can be scrolled down.
            </summary>
        </member>
        <member name="M:LiveSplitCore.LayoutRefMut.Remount">
            <summary>
            Remounts all the components as if they were freshly initialized. Some
            components may only provide some information whenever it changes or when
            their state is first queried. Remounting returns this information again,
            whenever the layout's state is queried the next time.
            </summary>
        </member>
        <member name="T:LiveSplitCore.Layout">
            <summary>
            A Layout allows you to combine multiple components together to visualize a
            variety of information the runner is interested in.
            </summary>
        </member>
        <member name="M:LiveSplitCore.Layout.#ctor">
            <summary>
            Creates a new empty layout with no components.
            </summary>
        </member>
        <member name="M:LiveSplitCore.Layout.DefaultLayout">
            <summary>
            Creates a new default layout that contains a default set of components
            in order to provide a good default layout for runners. Which components
            are provided by this and how they are configured may change in the
            future.
            </summary>
        </member>
        <member name="M:LiveSplitCore.Layout.ParseJson(System.String)">
            <summary>
            Parses a layout from the given JSON description of its settings. null is
            returned if it couldn't be parsed.
            </summary>
        </member>
        <member name="M:LiveSplitCore.Layout.ParseFileHandle(System.Int64)">
            <summary>
            Attempts to parse a layout from a given file. null is returned it couldn't
            be parsed. This will not close the file descriptor / handle.
            </summary>
        </member>
        <member name="M:LiveSplitCore.Layout.ParseOriginalLivesplit(System.IntPtr,System.Int64)">
            <summary>
            Parses a layout saved by the original LiveSplit. This is lossy, as not
            everything can be converted completely. null is returned if it couldn't be
            parsed at all.
            </summary>
        </member>
        <member name="T:LiveSplitCore.LayoutEditorRef">
            <summary>
            The Layout Editor allows modifying Layouts while ensuring all the different
            invariants of the Layout objects are upheld no matter what kind of
            operations are being applied. It provides the current state of the editor as
            state objects that can be visualized by any kind of User Interface.
            </summary>
        </member>
        <member name="M:LiveSplitCore.LayoutEditorRef.StateAsJson">
            <summary>
            Encodes the Layout Editor's state as JSON in order to visualize it.
            </summary>
        </member>
        <member name="T:LiveSplitCore.LayoutEditorRefMut">
            <summary>
            The Layout Editor allows modifying Layouts while ensuring all the different
            invariants of the Layout objects are upheld no matter what kind of
            operations are being applied. It provides the current state of the editor as
            state objects that can be visualized by any kind of User Interface.
            </summary>
        </member>
        <member name="M:LiveSplitCore.LayoutEditorRefMut.LayoutStateAsJson(LiveSplitCore.TimerRef)">
            <summary>
            Encodes the layout's state as JSON based on the timer provided. You can use
            this to visualize all of the components of a layout, while it is still being
            edited by the Layout Editor.
            </summary>
        </member>
        <member name="M:LiveSplitCore.LayoutEditorRefMut.Select(System.Int64)">
            <summary>
            Selects the component with the given index in order to modify its
            settings. Only a single component is selected at any given time. You may
            not provide an invalid index.
            </summary>
        </member>
        <member name="M:LiveSplitCore.LayoutEditorRefMut.AddComponent(LiveSplitCore.Component)">
            <summary>
            Adds the component provided to the end of the layout. The newly added
            component becomes the selected component.
            </summary>
        </member>
        <member name="M:LiveSplitCore.LayoutEditorRefMut.RemoveComponent">
            <summary>
            Removes the currently selected component, unless there's only one
            component in the layout. The next component becomes the selected
            component. If there's none, the previous component becomes the selected
            component instead.
            </summary>
        </member>
        <member name="M:LiveSplitCore.LayoutEditorRefMut.MoveComponentUp">
            <summary>
            Moves the selected component up, unless the first component is selected.
            </summary>
        </member>
        <member name="M:LiveSplitCore.LayoutEditorRefMut.MoveComponentDown">
            <summary>
            Moves the selected component down, unless the last component is
            selected.
            </summary>
        </member>
        <member name="M:LiveSplitCore.LayoutEditorRefMut.MoveComponent(System.Int64)">
            <summary>
            Moves the selected component to the index provided. You may not provide
            an invalid index.
            </summary>
        </member>
        <member name="M:LiveSplitCore.LayoutEditorRefMut.DuplicateComponent">
            <summary>
            Duplicates the currently selected component. The copy gets placed right
            after the selected component and becomes the newly selected component.
            </summary>
        </member>
        <member name="M:LiveSplitCore.LayoutEditorRefMut.SetComponentSettingsValue(System.Int64,LiveSplitCore.SettingValue)">
            <summary>
            Sets a setting's value of the selected component by its setting index
            to the given value.
            
            This panics if the type of the value to be set is not compatible with
            the type of the setting's value. A panic can also occur if the index of
            the setting provided is out of bounds.
            </summary>
        </member>
        <member name="M:LiveSplitCore.LayoutEditorRefMut.SetGeneralSettingsValue(System.Int64,LiveSplitCore.SettingValue)">
            <summary>
            Sets a setting's value of the general settings by its setting index to
            the given value.
            
            This panics if the type of the value to be set is not compatible with
            the type of the setting's value. A panic can also occur if the index of
            the setting provided is out of bounds.
            </summary>
        </member>
        <member name="T:LiveSplitCore.LayoutEditor">
            <summary>
            The Layout Editor allows modifying Layouts while ensuring all the different
            invariants of the Layout objects are upheld no matter what kind of
            operations are being applied. It provides the current state of the editor as
            state objects that can be visualized by any kind of User Interface.
            </summary>
        </member>
        <member name="M:LiveSplitCore.LayoutEditor.New(LiveSplitCore.Layout)">
            <summary>
            Creates a new Layout Editor that modifies the Layout provided. Creation of
            the Layout Editor fails when a Layout with no components is provided. In
            that case null is returned instead.
            </summary>
        </member>
        <member name="M:LiveSplitCore.LayoutEditor.Close">
            <summary>
            Closes the Layout Editor and gives back access to the modified Layout. In
            case you want to implement a Cancel Button, just dispose the Layout object
            you get here.
            </summary>
        </member>
        <member name="T:LiveSplitCore.LayoutStateRef">
            <summary>
            The state object describes the information to visualize for an entire
            layout. Use this with care, as invalid usage will result in a panic.
            
            Specifically, you should avoid doing the following:
            
            - Using out of bounds indices.
            - Using the wrong getter function on the wrong type of component.
            </summary>
        </member>
        <member name="M:LiveSplitCore.LayoutStateRef.Len">
            <summary>
            Gets the number of Components in the Layout State.
            </summary>
        </member>
        <member name="M:LiveSplitCore.LayoutStateRef.ComponentType(System.Int64)">
            <summary>
            Returns a string describing the type of the Component at the specified
            index.
            </summary>
        </member>
        <member name="M:LiveSplitCore.LayoutStateRef.ComponentAsBlankSpace(System.Int64)">
            <summary>
            Gets the Blank Space component state at the specified index.
            </summary>
        </member>
        <member name="M:LiveSplitCore.LayoutStateRef.ComponentAsDetailedTimer(System.Int64)">
            <summary>
            Gets the Detailed Timer component state at the specified index.
            </summary>
        </member>
        <member name="M:LiveSplitCore.LayoutStateRef.ComponentAsGraph(System.Int64)">
            <summary>
            Gets the Graph component state at the specified index.
            </summary>
        </member>
        <member name="M:LiveSplitCore.LayoutStateRef.ComponentAsKeyValue(System.Int64)">
            <summary>
            Gets the Key Value component state at the specified index.
            </summary>
        </member>
        <member name="M:LiveSplitCore.LayoutStateRef.ComponentAsSeparator(System.Int64)">
            <summary>
            Gets the Separator component state at the specified index.
            </summary>
        </member>
        <member name="M:LiveSplitCore.LayoutStateRef.ComponentAsSplits(System.Int64)">
            <summary>
            Gets the Splits component state at the specified index.
            </summary>
        </member>
        <member name="M:LiveSplitCore.LayoutStateRef.ComponentAsText(System.Int64)">
            <summary>
            Gets the Text component state at the specified index.
            </summary>
        </member>
        <member name="M:LiveSplitCore.LayoutStateRef.ComponentAsTimer(System.Int64)">
            <summary>
            Gets the Timer component state at the specified index.
            </summary>
        </member>
        <member name="M:LiveSplitCore.LayoutStateRef.ComponentAsTitle(System.Int64)">
            <summary>
            Gets the Title component state at the specified index.
            </summary>
        </member>
        <member name="T:LiveSplitCore.LayoutStateRefMut">
            <summary>
            The state object describes the information to visualize for an entire
            layout. Use this with care, as invalid usage will result in a panic.
            
            Specifically, you should avoid doing the following:
            
            - Using out of bounds indices.
            - Using the wrong getter function on the wrong type of component.
            </summary>
        </member>
        <member name="T:LiveSplitCore.LayoutState">
            <summary>
            The state object describes the information to visualize for an entire
            layout. Use this with care, as invalid usage will result in a panic.
            
            Specifically, you should avoid doing the following:
            
            - Using out of bounds indices.
            - Using the wrong getter function on the wrong type of component.
            </summary>
        </member>
        <member name="T:LiveSplitCore.ParseRunResultRef">
            <summary>
            A run parsed by the Composite Parser. This contains the Run itself and
            information about which parser parsed it.
            </summary>
        </member>
        <member name="M:LiveSplitCore.ParseRunResultRef.ParsedSuccessfully">
            <summary>
            Returns true if the Run got parsed successfully. false is returned otherwise.
            </summary>
        </member>
        <member name="M:LiveSplitCore.ParseRunResultRef.TimerKind">
            <summary>
            Accesses the name of the Parser that parsed the Run. You may not call this
            if the Run wasn't parsed successfully.
            </summary>
        </member>
        <member name="M:LiveSplitCore.ParseRunResultRef.IsGenericTimer">
            <summary>
            Checks whether the Parser parsed a generic timer. Since a generic timer can
            have any name, it may clash with the specific timer formats that
            livesplit-core supports. With this function you can determine if a generic
            timer format was parsed, instead of one of the more specific timer formats.
            </summary>
        </member>
        <member name="T:LiveSplitCore.ParseRunResultRefMut">
            <summary>
            A run parsed by the Composite Parser. This contains the Run itself and
            information about which parser parsed it.
            </summary>
        </member>
        <member name="T:LiveSplitCore.ParseRunResult">
            <summary>
            A run parsed by the Composite Parser. This contains the Run itself and
            information about which parser parsed it.
            </summary>
        </member>
        <member name="M:LiveSplitCore.ParseRunResult.Unwrap">
            <summary>
            Moves the actual Run object out of the Result. You may not call this if the
            Run wasn't parsed successfully.
            </summary>
        </member>
        <member name="T:LiveSplitCore.PbChanceComponentRef">
            <summary>
            The PB Chance Component is a component that shows how likely it is to beat
            the Personal Best. If there is no active attempt it shows the general chance
            of beating the Personal Best. During an attempt it actively changes based on
            how well the attempt is going.
            </summary>
        </member>
        <member name="M:LiveSplitCore.PbChanceComponentRef.StateAsJson(LiveSplitCore.TimerRef)">
            <summary>
            Encodes the component's state information as JSON.
            </summary>
        </member>
        <member name="M:LiveSplitCore.PbChanceComponentRef.State(LiveSplitCore.TimerRef)">
            <summary>
            Calculates the component's state based on the timer provided.
            </summary>
        </member>
        <member name="T:LiveSplitCore.PbChanceComponentRefMut">
            <summary>
            The PB Chance Component is a component that shows how likely it is to beat
            the Personal Best. If there is no active attempt it shows the general chance
            of beating the Personal Best. During an attempt it actively changes based on
            how well the attempt is going.
            </summary>
        </member>
        <member name="T:LiveSplitCore.PbChanceComponent">
            <summary>
            The PB Chance Component is a component that shows how likely it is to beat
            the Personal Best. If there is no active attempt it shows the general chance
            of beating the Personal Best. During an attempt it actively changes based on
            how well the attempt is going.
            </summary>
        </member>
        <member name="M:LiveSplitCore.PbChanceComponent.#ctor">
            <summary>
            Creates a new PB Chance Component.
            </summary>
        </member>
        <member name="M:LiveSplitCore.PbChanceComponent.IntoGeneric">
            <summary>
            Converts the component into a generic component suitable for using with a
            layout.
            </summary>
        </member>
        <member name="T:LiveSplitCore.PossibleTimeSaveComponentRef">
            <summary>
            The Possible Time Save Component is a component that shows how much time the
            chosen comparison could've saved for the current segment, based on the Best
            Segments. This component also allows showing the Total Possible Time Save
            for the remainder of the current attempt.
            </summary>
        </member>
        <member name="M:LiveSplitCore.PossibleTimeSaveComponentRef.StateAsJson(LiveSplitCore.TimerRef)">
            <summary>
            Encodes the component's state information as JSON.
            </summary>
        </member>
        <member name="M:LiveSplitCore.PossibleTimeSaveComponentRef.State(LiveSplitCore.TimerRef)">
            <summary>
            Calculates the component's state based on the timer provided.
            </summary>
        </member>
        <member name="T:LiveSplitCore.PossibleTimeSaveComponentRefMut">
            <summary>
            The Possible Time Save Component is a component that shows how much time the
            chosen comparison could've saved for the current segment, based on the Best
            Segments. This component also allows showing the Total Possible Time Save
            for the remainder of the current attempt.
            </summary>
        </member>
        <member name="T:LiveSplitCore.PossibleTimeSaveComponent">
            <summary>
            The Possible Time Save Component is a component that shows how much time the
            chosen comparison could've saved for the current segment, based on the Best
            Segments. This component also allows showing the Total Possible Time Save
            for the remainder of the current attempt.
            </summary>
        </member>
        <member name="M:LiveSplitCore.PossibleTimeSaveComponent.#ctor">
            <summary>
            Creates a new Possible Time Save Component.
            </summary>
        </member>
        <member name="M:LiveSplitCore.PossibleTimeSaveComponent.IntoGeneric">
            <summary>
            Converts the component into a generic component suitable for using with a
            layout.
            </summary>
        </member>
        <member name="T:LiveSplitCore.PotentialCleanUpRef">
            <summary>
            Describes a potential clean up that could be applied. You can query a
            message describing the details of this potential clean up. A potential clean
            up can then be turned into an actual clean up in order to apply it to the
            Run.
            </summary>
        </member>
        <member name="M:LiveSplitCore.PotentialCleanUpRef.Message">
            <summary>
            Accesses the message describing the potential clean up that can be applied
            to a Run.
            </summary>
        </member>
        <member name="T:LiveSplitCore.PotentialCleanUpRefMut">
            <summary>
            Describes a potential clean up that could be applied. You can query a
            message describing the details of this potential clean up. A potential clean
            up can then be turned into an actual clean up in order to apply it to the
            Run.
            </summary>
        </member>
        <member name="T:LiveSplitCore.PotentialCleanUp">
            <summary>
            Describes a potential clean up that could be applied. You can query a
            message describing the details of this potential clean up. A potential clean
            up can then be turned into an actual clean up in order to apply it to the
            Run.
            </summary>
        </member>
        <member name="T:LiveSplitCore.PreviousSegmentComponentRef">
            <summary>
            The Previous Segment Component is a component that shows how much time was
            saved or lost during the previous segment based on the chosen comparison.
            Additionally, the potential time save for the previous segment can be
            displayed. This component switches to a `Live Segment` view that shows
            active time loss whenever the runner is losing time on the current segment.
            </summary>
        </member>
        <member name="M:LiveSplitCore.PreviousSegmentComponentRef.StateAsJson(LiveSplitCore.TimerRef,LiveSplitCore.GeneralLayoutSettingsRef)">
            <summary>
            Encodes the component's state information as JSON.
            </summary>
        </member>
        <member name="M:LiveSplitCore.PreviousSegmentComponentRef.State(LiveSplitCore.TimerRef,LiveSplitCore.GeneralLayoutSettingsRef)">
            <summary>
            Calculates the component's state based on the timer and the layout
            settings provided.
            </summary>
        </member>
        <member name="T:LiveSplitCore.PreviousSegmentComponentRefMut">
            <summary>
            The Previous Segment Component is a component that shows how much time was
            saved or lost during the previous segment based on the chosen comparison.
            Additionally, the potential time save for the previous segment can be
            displayed. This component switches to a `Live Segment` view that shows
            active time loss whenever the runner is losing time on the current segment.
            </summary>
        </member>
        <member name="T:LiveSplitCore.PreviousSegmentComponent">
            <summary>
            The Previous Segment Component is a component that shows how much time was
            saved or lost during the previous segment based on the chosen comparison.
            Additionally, the potential time save for the previous segment can be
            displayed. This component switches to a `Live Segment` view that shows
            active time loss whenever the runner is losing time on the current segment.
            </summary>
        </member>
        <member name="M:LiveSplitCore.PreviousSegmentComponent.#ctor">
            <summary>
            Creates a new Previous Segment Component.
            </summary>
        </member>
        <member name="M:LiveSplitCore.PreviousSegmentComponent.IntoGeneric">
            <summary>
            Converts the component into a generic component suitable for using with a
            layout.
            </summary>
        </member>
        <member name="T:LiveSplitCore.RunRef">
            <summary>
            A Run stores the split times for a specific game and category of a runner.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunRef.Clone">
            <summary>
            Clones the Run object.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunRef.GameName">
            <summary>
            Accesses the name of the game this Run is for.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunRef.GameIconPtr">
            <summary>
            Accesses the game icon's data. If there is no game icon, this returns an
            empty buffer.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunRef.GameIconLen">
            <summary>
            Accesses the amount of bytes the game icon's data takes up.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunRef.CategoryName">
            <summary>
            Accesses the name of the category this Run is for.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunRef.ExtendedFileName(System.Boolean)">
            <summary>
            Returns a file name (without the extension) suitable for this Run that
            is built the following way:
            
            Game Name - Category Name
            
            If either is empty, the dash is omitted. Special characters that cause
            problems in file names are also omitted. If an extended category name is
            used, the variables of the category are appended in a parenthesis.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunRef.ExtendedName(System.Boolean)">
            <summary>
            Returns a name suitable for this Run that is built the following way:
            
            Game Name - Category Name
            
            If either is empty, the dash is omitted. If an extended category name is
            used, the variables of the category are appended in a parenthesis.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunRef.ExtendedCategoryName(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns an extended category name that possibly includes the region,
            platform and variables, depending on the arguments provided. An extended
            category name may look like this:
            
            Any% (No Tuner, JPN, Wii Emulator)
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunRef.AttemptCount">
            <summary>
            Returns the amount of runs that have been attempted with these splits.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunRef.Metadata">
            <summary>
            Accesses additional metadata of this Run, like the platform and region
            of the game.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunRef.Offset">
            <summary>
            Accesses the time an attempt of this Run should start at.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunRef.Len">
            <summary>
            Returns the amount of segments stored in this Run.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunRef.HasBeenModified">
            <summary>
            Returns whether the Run has been modified and should be saved so that the
            changes don't get lost.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunRef.Segment(System.Int64)">
            <summary>
            Accesses a certain segment of this Run. You may not provide an out of bounds
            index.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunRef.AttemptHistoryLen">
            <summary>
            Returns the amount attempt history elements are stored in this Run.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunRef.AttemptHistoryIndex(System.Int64)">
            <summary>
            Accesses the an attempt history element by its index. This does not store
            the actual segment times, just the overall attempt information. Information
            about the individual segments is stored within each segment. You may not
            provide an out of bounds index.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunRef.SaveAsLss">
            <summary>
            Saves a Run as a LiveSplit splits file (*.lss). If the run is actively in
            use by a timer, use the appropriate method on the timer instead, in order to
            properly save the current attempt as well.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunRef.CustomComparisonsLen">
            <summary>
            Returns the amount of custom comparisons stored in this Run.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunRef.CustomComparison(System.Int64)">
            <summary>
            Accesses a custom comparison stored in this Run by its index. This includes
            `Personal Best` but excludes all the other Comparison Generators. You may
            not provide an out of bounds index.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunRef.AutoSplitterSettings">
            <summary>
            Accesses the Auto Splitter Settings that are encoded as XML.
            </summary>
        </member>
        <member name="T:LiveSplitCore.RunRefMut">
            <summary>
            A Run stores the split times for a specific game and category of a runner.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunRefMut.PushSegment(LiveSplitCore.Segment)">
            <summary>
            Pushes the segment provided to the end of the list of segments of this Run.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunRefMut.SetGameName(System.String)">
            <summary>
            Sets the name of the game this Run is for.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunRefMut.SetCategoryName(System.String)">
            <summary>
            Sets the name of the category this Run is for.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunRefMut.MarkAsModified">
            <summary>
            Marks the Run as modified, so that it is known that there are changes
            that should be saved.
            </summary>
        </member>
        <member name="T:LiveSplitCore.Run">
            <summary>
            A Run stores the split times for a specific game and category of a runner.
            </summary>
        </member>
        <member name="M:LiveSplitCore.Run.#ctor">
            <summary>
            Creates a new Run object with no segments.
            </summary>
        </member>
        <member name="M:LiveSplitCore.Run.Parse(System.IntPtr,System.Int64,System.String,System.Boolean)">
            <summary>
            Attempts to parse a splits file from an array by invoking the corresponding
            parser for the file format detected. A path to the splits file can be
            provided, which helps saving the splits file again later. Additionally you
            need to specify if additional files, like external images are allowed to be
            loaded. If you are using livesplit-core in a server-like environment, set
            this to false. Only client-side applications should set this to true.
            </summary>
        </member>
        <member name="M:LiveSplitCore.Run.ParseFileHandle(System.Int64,System.String,System.Boolean)">
            <summary>
            Attempts to parse a splits file from a file by invoking the corresponding
            parser for the file format detected. A path to the splits file can be
            provided, which helps saving the splits file again later. Additionally you
            need to specify if additional files, like external images are allowed to be
            loaded. If you are using livesplit-core in a server-like environment, set
            this to false. Only client-side applications should set this to true. On
            Unix you pass a file descriptor to this function. On Windows you pass a file
            handle to this function. The file descriptor / handle does not get closed.
            </summary>
        </member>
        <member name="T:LiveSplitCore.RunEditorRef">
            <summary>
            The Run Editor allows modifying Runs while ensuring that all the different
            invariants of the Run objects are upheld no matter what kind of operations
            are being applied to the Run. It provides the current state of the editor as
            state objects that can be visualized by any kind of User Interface.
            </summary>
        </member>
        <member name="T:LiveSplitCore.RunEditorRefMut">
            <summary>
            The Run Editor allows modifying Runs while ensuring that all the different
            invariants of the Run objects are upheld no matter what kind of operations
            are being applied to the Run. It provides the current state of the editor as
            state objects that can be visualized by any kind of User Interface.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunEditorRefMut.StateAsJson">
            <summary>
            Calculates the Run Editor's state and encodes it as
            JSON in order to visualize it.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunEditorRefMut.SelectTimingMethod(System.Byte)">
            <summary>
            Selects a different timing method for being modified.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunEditorRefMut.Unselect(System.Int64)">
            <summary>
            Unselects the segment with the given index. If it's not selected or the
            index is out of bounds, nothing happens. The segment is not unselected,
            when it is the only segment that is selected. If the active segment is
            unselected, the most recently selected segment remaining becomes the
            active segment.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunEditorRefMut.SelectAdditionally(System.Int64)">
            <summary>
            In addition to the segments that are already selected, the segment with
            the given index is being selected. The segment chosen also becomes the
            active segment.
            
            This panics if the index of the segment provided is out of bounds.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunEditorRefMut.SelectOnly(System.Int64)">
            <summary>
            Selects the segment with the given index. All other segments are
            unselected. The segment chosen also becomes the active segment.
            
            This panics if the index of the segment provided is out of bounds.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunEditorRefMut.SetGameName(System.String)">
            <summary>
            Sets the name of the game.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunEditorRefMut.SetCategoryName(System.String)">
            <summary>
            Sets the name of the category.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunEditorRefMut.ParseAndSetOffset(System.String)">
            <summary>
            Parses and sets the timer offset from the string provided. The timer
            offset specifies the time, the timer starts at when starting a new
            attempt.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunEditorRefMut.ParseAndSetAttemptCount(System.String)">
            <summary>
            Parses and sets the attempt count from the string provided. Changing
            this has no affect on the attempt history or the segment history. This
            number is mostly just a visual number for the runner.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunEditorRefMut.SetGameIcon(System.IntPtr,System.Int64)">
            <summary>
            Sets the game's icon.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunEditorRefMut.RemoveGameIcon">
            <summary>
            Removes the game's icon.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunEditorRefMut.SetRunId(System.String)">
            <summary>
            Sets the speedrun.com Run ID of the run. You need to ensure that the
            record on speedrun.com matches up with the Personal Best of this run.
            This may be empty if there's no association.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunEditorRefMut.SetRegionName(System.String)">
            <summary>
            Sets the name of the region this game is from. This may be empty if it's
            not specified.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunEditorRefMut.SetPlatformName(System.String)">
            <summary>
            Sets the name of the platform this game is run on. This may be empty if
            it's not specified.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunEditorRefMut.SetEmulatorUsage(System.Boolean)">
            <summary>
            Specifies whether this speedrun is done on an emulator. Keep in mind
            that false may also mean that this information is simply not known.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunEditorRefMut.SetSpeedrunComVariable(System.String,System.String)">
            <summary>
            Sets the speedrun.com variable with the name specified to the value specified. A
            variable is an arbitrary key value pair storing additional information
            about the category. An example of this may be whether Amiibos are used
            in this category. If the variable doesn't exist yet, it is being
            inserted.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunEditorRefMut.RemoveSpeedrunComVariable(System.String)">
            <summary>
            Removes the speedrun.com variable with the name specified.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunEditorRefMut.AddCustomVariable(System.String)">
            <summary>
            Adds a new permanent custom variable. If there's a temporary variable with
            the same name, it gets turned into a permanent variable and its value stays.
            If a permanent variable with the name already exists, nothing happens.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunEditorRefMut.SetCustomVariable(System.String,System.String)">
            <summary>
            Sets the value of a custom variable with the name specified. If the custom
            variable does not exist, or is not a permanent variable, nothing happens.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunEditorRefMut.RemoveCustomVariable(System.String)">
            <summary>
            Removes the custom variable with the name specified. If the custom variable
            does not exist, or is not a permanent variable, nothing happens.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunEditorRefMut.ClearMetadata">
            <summary>
            Resets all the Metadata Information.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunEditorRefMut.InsertSegmentAbove">
            <summary>
            Inserts a new empty segment above the active segment and adjusts the
            Run's history information accordingly. The newly created segment is then
            the only selected segment and also the active segment.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunEditorRefMut.InsertSegmentBelow">
            <summary>
            Inserts a new empty segment below the active segment and adjusts the
            Run's history information accordingly. The newly created segment is then
            the only selected segment and also the active segment.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunEditorRefMut.RemoveSegments">
            <summary>
            Removes all the selected segments, unless all of them are selected. The
            run's information is automatically adjusted properly. The next
            not-to-be-removed segment after the active segment becomes the new
            active segment. If there's none, then the next not-to-be-removed segment
            before the active segment, becomes the new active segment.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunEditorRefMut.MoveSegmentsUp">
            <summary>
            Moves all the selected segments up, unless the first segment is
            selected. The run's information is automatically adjusted properly. The
            active segment stays the active segment.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunEditorRefMut.MoveSegmentsDown">
            <summary>
            Moves all the selected segments down, unless the last segment is
            selected. The run's information is automatically adjusted properly. The
            active segment stays the active segment.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunEditorRefMut.ActiveSetIcon(System.IntPtr,System.Int64)">
            <summary>
            Sets the icon of the active segment.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunEditorRefMut.ActiveRemoveIcon">
            <summary>
            Removes the icon of the active segment.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunEditorRefMut.ActiveSetName(System.String)">
            <summary>
            Sets the name of the active segment.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunEditorRefMut.ActiveParseAndSetSplitTime(System.String)">
            <summary>
            Parses a split time from a string and sets it for the active segment with
            the chosen timing method.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunEditorRefMut.ActiveParseAndSetSegmentTime(System.String)">
            <summary>
            Parses a segment time from a string and sets it for the active segment with
            the chosen timing method.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunEditorRefMut.ActiveParseAndSetBestSegmentTime(System.String)">
            <summary>
            Parses a best segment time from a string and sets it for the active segment
            with the chosen timing method.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunEditorRefMut.ActiveParseAndSetComparisonTime(System.String,System.String)">
            <summary>
            Parses a comparison time for the provided comparison and sets it for the
            active active segment with the chosen timing method.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunEditorRefMut.AddComparison(System.String)">
            <summary>
            Adds a new custom comparison. It can't be added if it starts with
            `[Race]` or already exists.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunEditorRefMut.ImportComparison(LiveSplitCore.RunRef,System.String)">
            <summary>
            Imports the Personal Best from the provided run as a comparison. The
            comparison can't be added if its name starts with `[Race]` or it already
            exists.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunEditorRefMut.RemoveComparison(System.String)">
            <summary>
            Removes the chosen custom comparison. You can't remove a Comparison
            Generator's Comparison or the Personal Best.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunEditorRefMut.RenameComparison(System.String,System.String)">
            <summary>
            Renames a comparison. The comparison can't be renamed if the new name of
            the comparison starts with `[Race]` or it already exists.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunEditorRefMut.MoveComparison(System.Int64,System.Int64)">
            <summary>
            Reorders the custom comparisons by moving the comparison with the source
            index specified to the destination index specified. Returns false if one
            of the indices is invalid. The indices are based on the comparison names of
            the Run Editor's state.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunEditorRefMut.ParseAndGenerateGoalComparison(System.String)">
            <summary>
            Parses a goal time and generates a custom goal comparison based on the
            parsed value. The comparison's times are automatically balanced based on the
            runner's history such that it roughly represents what split times for the
            goal time would roughly look like. Since it is populated by the runner's
            history, only goal times within the sum of the best segments and the sum of
            the worst segments are supported. Everything else is automatically capped by
            that range. The comparison is only populated for the selected timing method.
            The other timing method's comparison times are not modified by this, so you
            can call this again with the other timing method to generate the comparison
            times for both timing methods.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunEditorRefMut.ClearHistory">
            <summary>
            Clears out the Attempt History and the Segment Histories of all the
            segments.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunEditorRefMut.ClearTimes">
            <summary>
            Clears out the Attempt History, the Segment Histories, all the times,
            sets the Attempt Count to 0 and clears the speedrun.com run id
            association. All Custom Comparisons other than `Personal Best` are
            deleted as well.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunEditorRefMut.CleanSumOfBest">
            <summary>
            Creates a Sum of Best Cleaner which allows you to interactively remove
            potential issues in the segment history that lead to an inaccurate Sum
            of Best. If you skip a split, whenever you will do the next split, the
            combined segment time might be faster than the sum of the individual
            best segments. The Sum of Best Cleaner will point out all of these and
            allows you to delete them individually if any of them seem wrong.
            </summary>
        </member>
        <member name="T:LiveSplitCore.RunEditor">
            <summary>
            The Run Editor allows modifying Runs while ensuring that all the different
            invariants of the Run objects are upheld no matter what kind of operations
            are being applied to the Run. It provides the current state of the editor as
            state objects that can be visualized by any kind of User Interface.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunEditor.New(LiveSplitCore.Run)">
            <summary>
            Creates a new Run Editor that modifies the Run provided. Creation of the Run
            Editor fails when a Run with no segments is provided. If a Run object with
            no segments is provided, the Run Editor creation fails and null is
            returned.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunEditor.Close">
            <summary>
            Closes the Run Editor and gives back access to the modified Run object. In
            case you want to implement a Cancel Button, just dispose the Run object you
            get here.
            </summary>
        </member>
        <member name="T:LiveSplitCore.RunMetadataRef">
            <summary>
            The Run Metadata stores additional information about a run, like the
            platform and region of the game. All of this information is optional.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunMetadataRef.RunId">
            <summary>
            Accesses the speedrun.com Run ID of the run. This Run ID specify which
            Record on speedrun.com this run is associated with. This should be
            changed once the Personal Best doesn't match up with that record
            anymore. This may be empty if there's no association.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunMetadataRef.PlatformName">
            <summary>
            Accesses the name of the platform this game is run on. This may be empty
            if it's not specified.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunMetadataRef.UsesEmulator">
            <summary>
            Returns true if this speedrun is done on an emulator. However false
            may also indicate that this information is simply not known.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunMetadataRef.RegionName">
            <summary>
            Accesses the name of the region this game is from. This may be empty if
            it's not specified.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunMetadataRef.SpeedrunComVariables">
            <summary>
            Returns an iterator iterating over all the speedrun.com variables and their
            values that have been specified.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunMetadataRef.CustomVariables">
            <summary>
            Returns an iterator iterating over all the custom variables and their
            values. This includes both temporary and permanent variables.
            </summary>
        </member>
        <member name="T:LiveSplitCore.RunMetadataRefMut">
            <summary>
            The Run Metadata stores additional information about a run, like the
            platform and region of the game. All of this information is optional.
            </summary>
        </member>
        <member name="T:LiveSplitCore.RunMetadata">
            <summary>
            The Run Metadata stores additional information about a run, like the
            platform and region of the game. All of this information is optional.
            </summary>
        </member>
        <member name="T:LiveSplitCore.RunMetadataCustomVariableRef">
            <summary>
            A custom variable is a key value pair storing additional information about a
            run. Unlike the speedrun.com variables, these can be fully custom and don't
            need to correspond to anything on speedrun.com. Permanent custom variables
            can be specified by the runner. Additionally auto splitters or other sources
            may provide temporary custom variables that are not stored in the splits
            files.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunMetadataCustomVariableRef.Name">
            <summary>
            Accesses the name of this custom variable.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunMetadataCustomVariableRef.Value">
            <summary>
            Accesses the value of this custom variable.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunMetadataCustomVariableRef.IsPermanent">
            <summary>
            Returns true if the custom variable is permanent. Permanent variables get
            stored in the splits file and are visible in the run editor. Temporary
            variables are not.
            </summary>
        </member>
        <member name="T:LiveSplitCore.RunMetadataCustomVariableRefMut">
            <summary>
            A custom variable is a key value pair storing additional information about a
            run. Unlike the speedrun.com variables, these can be fully custom and don't
            need to correspond to anything on speedrun.com. Permanent custom variables
            can be specified by the runner. Additionally auto splitters or other sources
            may provide temporary custom variables that are not stored in the splits
            files.
            </summary>
        </member>
        <member name="T:LiveSplitCore.RunMetadataCustomVariable">
            <summary>
            A custom variable is a key value pair storing additional information about a
            run. Unlike the speedrun.com variables, these can be fully custom and don't
            need to correspond to anything on speedrun.com. Permanent custom variables
            can be specified by the runner. Additionally auto splitters or other sources
            may provide temporary custom variables that are not stored in the splits
            files.
            </summary>
        </member>
        <member name="T:LiveSplitCore.RunMetadataCustomVariablesIterRef">
            <summary>
            An iterator iterating over all the custom variables and their values
            that have been specified.
            </summary>
        </member>
        <member name="T:LiveSplitCore.RunMetadataCustomVariablesIterRefMut">
            <summary>
            An iterator iterating over all the custom variables and their values
            that have been specified.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunMetadataCustomVariablesIterRefMut.Next">
            <summary>
            Accesses the next custom variable. Returns null if there are no more
            variables.
            </summary>
        </member>
        <member name="T:LiveSplitCore.RunMetadataCustomVariablesIter">
            <summary>
            An iterator iterating over all the custom variables and their values
            that have been specified.
            </summary>
        </member>
        <member name="T:LiveSplitCore.RunMetadataSpeedrunComVariableRef">
            <summary>
            A speedrun.com variable is an arbitrary key value pair storing additional
            information about the category. An example of this may be whether Amiibos
            are used in the category.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunMetadataSpeedrunComVariableRef.Name">
            <summary>
            Accesses the name of this speedrun.com variable.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunMetadataSpeedrunComVariableRef.Value">
            <summary>
            Accesses the value of this speedrun.com variable.
            </summary>
        </member>
        <member name="T:LiveSplitCore.RunMetadataSpeedrunComVariableRefMut">
            <summary>
            A speedrun.com variable is an arbitrary key value pair storing additional
            information about the category. An example of this may be whether Amiibos
            are used in the category.
            </summary>
        </member>
        <member name="T:LiveSplitCore.RunMetadataSpeedrunComVariable">
            <summary>
            A speedrun.com variable is an arbitrary key value pair storing additional
            information about the category. An example of this may be whether Amiibos
            are used in the category.
            </summary>
        </member>
        <member name="T:LiveSplitCore.RunMetadataSpeedrunComVariablesIterRef">
            <summary>
            An iterator iterating over all the speedrun.com variables and their values
            that have been specified.
            </summary>
        </member>
        <member name="T:LiveSplitCore.RunMetadataSpeedrunComVariablesIterRefMut">
            <summary>
            An iterator iterating over all the speedrun.com variables and their values
            that have been specified.
            </summary>
        </member>
        <member name="M:LiveSplitCore.RunMetadataSpeedrunComVariablesIterRefMut.Next">
            <summary>
            Accesses the next speedrun.com variable. Returns null if there are no more
            variables.
            </summary>
        </member>
        <member name="T:LiveSplitCore.RunMetadataSpeedrunComVariablesIter">
            <summary>
            An iterator iterating over all the speedrun.com variables and their values
            that have been specified.
            </summary>
        </member>
        <member name="T:LiveSplitCore.SegmentRef">
            <summary>
            A Segment describes a point in a speedrun that is suitable for storing a
            split time. This stores the name of that segment, an icon, the split times
            of different comparisons, and a history of segment times.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SegmentRef.Name">
            <summary>
            Accesses the name of the segment.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SegmentRef.IconPtr">
            <summary>
            Accesses the segment icon's data. If there is no segment icon, this returns
            an empty buffer.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SegmentRef.IconLen">
            <summary>
            Accesses the amount of bytes the segment icon's data takes up.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SegmentRef.Comparison(System.String)">
            <summary>
            Accesses the specified comparison's time. If there's none for this
            comparison, an empty time is being returned (but not stored in the
            segment).
            </summary>
        </member>
        <member name="M:LiveSplitCore.SegmentRef.PersonalBestSplitTime">
            <summary>
            Accesses the split time of the Personal Best for this segment. If it
            doesn't exist, an empty time is returned.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SegmentRef.BestSegmentTime">
            <summary>
            Accesses the Best Segment Time.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SegmentRef.SegmentHistory">
            <summary>
            Accesses the Segment History of this segment.
            </summary>
        </member>
        <member name="T:LiveSplitCore.SegmentRefMut">
            <summary>
            A Segment describes a point in a speedrun that is suitable for storing a
            split time. This stores the name of that segment, an icon, the split times
            of different comparisons, and a history of segment times.
            </summary>
        </member>
        <member name="T:LiveSplitCore.Segment">
            <summary>
            A Segment describes a point in a speedrun that is suitable for storing a
            split time. This stores the name of that segment, an icon, the split times
            of different comparisons, and a history of segment times.
            </summary>
        </member>
        <member name="M:LiveSplitCore.Segment.#ctor(System.String)">
            <summary>
            Creates a new Segment with the name given.
            </summary>
        </member>
        <member name="T:LiveSplitCore.SegmentHistoryRef">
            <summary>
            Stores the segment times achieved for a certain segment. Each segment is
            tagged with an index. Only segment times with an index larger than 0 are
            considered times actually achieved by the runner, while the others are
            artifacts of route changes and similar algorithmic changes.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SegmentHistoryRef.Iter">
            <summary>
            Iterates over all the segment times and their indices.
            </summary>
        </member>
        <member name="T:LiveSplitCore.SegmentHistoryRefMut">
            <summary>
            Stores the segment times achieved for a certain segment. Each segment is
            tagged with an index. Only segment times with an index larger than 0 are
            considered times actually achieved by the runner, while the others are
            artifacts of route changes and similar algorithmic changes.
            </summary>
        </member>
        <member name="T:LiveSplitCore.SegmentHistory">
            <summary>
            Stores the segment times achieved for a certain segment. Each segment is
            tagged with an index. Only segment times with an index larger than 0 are
            considered times actually achieved by the runner, while the others are
            artifacts of route changes and similar algorithmic changes.
            </summary>
        </member>
        <member name="T:LiveSplitCore.SegmentHistoryElementRef">
            <summary>
            A segment time achieved for a segment. It is tagged with an index. Only
            segment times with an index larger than 0 are considered times actually
            achieved by the runner, while the others are artifacts of route changes and
            similar algorithmic changes.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SegmentHistoryElementRef.Index">
            <summary>
            Accesses the index of the segment history element.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SegmentHistoryElementRef.Time">
            <summary>
            Accesses the segment time of the segment history element.
            </summary>
        </member>
        <member name="T:LiveSplitCore.SegmentHistoryElementRefMut">
            <summary>
            A segment time achieved for a segment. It is tagged with an index. Only
            segment times with an index larger than 0 are considered times actually
            achieved by the runner, while the others are artifacts of route changes and
            similar algorithmic changes.
            </summary>
        </member>
        <member name="T:LiveSplitCore.SegmentHistoryElement">
            <summary>
            A segment time achieved for a segment. It is tagged with an index. Only
            segment times with an index larger than 0 are considered times actually
            achieved by the runner, while the others are artifacts of route changes and
            similar algorithmic changes.
            </summary>
        </member>
        <member name="T:LiveSplitCore.SegmentHistoryIterRef">
            <summary>
            Iterates over all the segment times of a segment and their indices.
            </summary>
        </member>
        <member name="T:LiveSplitCore.SegmentHistoryIterRefMut">
            <summary>
            Iterates over all the segment times of a segment and their indices.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SegmentHistoryIterRefMut.Next">
            <summary>
            Accesses the next Segment History element. Returns null if there are no
            more elements.
            </summary>
        </member>
        <member name="T:LiveSplitCore.SegmentHistoryIter">
            <summary>
            Iterates over all the segment times of a segment and their indices.
            </summary>
        </member>
        <member name="T:LiveSplitCore.SegmentTimeComponentRef">
            <summary>
            The Segment Time Component is a component that shows the time for the current
            segment in a comparison of your choosing. If no comparison is specified it
            uses the timer's current comparison.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SegmentTimeComponentRef.StateAsJson(LiveSplitCore.TimerRef)">
            <summary>
            Encodes the component's state information as JSON.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SegmentTimeComponentRef.State(LiveSplitCore.TimerRef)">
            <summary>
            Calculates the component's state based on the timer provided.
            </summary>
        </member>
        <member name="T:LiveSplitCore.SegmentTimeComponentRefMut">
            <summary>
            The Segment Time Component is a component that shows the time for the current
            segment in a comparison of your choosing. If no comparison is specified it
            uses the timer's current comparison.
            </summary>
        </member>
        <member name="T:LiveSplitCore.SegmentTimeComponent">
            <summary>
            The Segment Time Component is a component that shows the time for the current
            segment in a comparison of your choosing. If no comparison is specified it
            uses the timer's current comparison.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SegmentTimeComponent.#ctor">
            <summary>
            Creates a new Segment Time Component.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SegmentTimeComponent.IntoGeneric">
            <summary>
            Converts the component into a generic component suitable for using with a
            layout.
            </summary>
        </member>
        <member name="T:LiveSplitCore.SeparatorComponentRef">
            <summary>
            The Separator Component is a simple component that only serves to render
            separators between components.
            </summary>
        </member>
        <member name="T:LiveSplitCore.SeparatorComponentRefMut">
            <summary>
            The Separator Component is a simple component that only serves to render
            separators between components.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SeparatorComponentRefMut.State(LiveSplitCore.TimerRef)">
            <summary>
            Calculates the component's state based on the timer provided.
            </summary>
        </member>
        <member name="T:LiveSplitCore.SeparatorComponent">
            <summary>
            The Separator Component is a simple component that only serves to render
            separators between components.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SeparatorComponent.#ctor">
            <summary>
            Creates a new Separator Component.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SeparatorComponent.IntoGeneric">
            <summary>
            Converts the component into a generic component suitable for using with a
            layout.
            </summary>
        </member>
        <member name="T:LiveSplitCore.SeparatorComponentStateRef">
            <summary>
            The state object describes the information to visualize for this component.
            </summary>
        </member>
        <member name="T:LiveSplitCore.SeparatorComponentStateRefMut">
            <summary>
            The state object describes the information to visualize for this component.
            </summary>
        </member>
        <member name="T:LiveSplitCore.SeparatorComponentState">
            <summary>
            The state object describes the information to visualize for this component.
            </summary>
        </member>
        <member name="T:LiveSplitCore.SettingValueRef">
            <summary>
            Describes a setting's value. Such a value can be of a variety of different
            types.
            </summary>
        </member>
        <member name="T:LiveSplitCore.SettingValueRefMut">
            <summary>
            Describes a setting's value. Such a value can be of a variety of different
            types.
            </summary>
        </member>
        <member name="T:LiveSplitCore.SettingValue">
            <summary>
            Describes a setting's value. Such a value can be of a variety of different
            types.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SettingValue.FromBool(System.Boolean)">
            <summary>
            Creates a new setting value from a boolean value.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SettingValue.FromUint(System.UInt32)">
            <summary>
            Creates a new setting value from an unsigned integer.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SettingValue.FromInt(System.Int32)">
            <summary>
            Creates a new setting value from a signed integer.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SettingValue.FromString(System.String)">
            <summary>
            Creates a new setting value from a string.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SettingValue.FromOptionalString(System.String)">
            <summary>
            Creates a new setting value from a string that has the type `optional string`.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SettingValue.FromOptionalEmptyString">
            <summary>
            Creates a new empty setting value that has the type `optional string`.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SettingValue.FromFloat(System.Double)">
            <summary>
            Creates a new setting value from a floating point number.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SettingValue.FromAccuracy(System.String)">
            <summary>
            Creates a new setting value from an accuracy name. If it doesn't match a
            known accuracy, null is returned.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SettingValue.FromDigitsFormat(System.String)">
            <summary>
            Creates a new setting value from a digits format name. If it doesn't match a
            known digits format, null is returned.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SettingValue.FromOptionalTimingMethod(System.String)">
            <summary>
            Creates a new setting value from a timing method name with the type
            `optional timing method`. If it doesn't match a known timing method, null
            is returned.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SettingValue.FromOptionalEmptyTimingMethod">
            <summary>
            Creates a new empty setting value with the type `optional timing method`.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SettingValue.FromColor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new setting value from the color provided as RGBA.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SettingValue.FromOptionalColor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new setting value from the color provided as RGBA with the type
            `optional color`.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SettingValue.FromOptionalEmptyColor">
            <summary>
            Creates a new empty setting value with the type `optional color`.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SettingValue.FromTransparentGradient">
            <summary>
            Creates a new setting value that is a transparent gradient.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SettingValue.FromVerticalGradient(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new setting value from the vertical gradient provided as two RGBA colors.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SettingValue.FromHorizontalGradient(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new setting value from the horizontal gradient provided as two RGBA colors.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SettingValue.FromAlternatingGradient(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new setting value from the alternating gradient provided as two RGBA colors.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SettingValue.FromAlignment(System.String)">
            <summary>
            Creates a new setting value from the alignment name provided. If it doesn't
            match a known alignment, null is returned.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SettingValue.FromColumnStartWith(System.String)">
            <summary>
            Creates a new setting value from the column start with name provided. If it
            doesn't match a known column start with, null is returned.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SettingValue.FromColumnUpdateWith(System.String)">
            <summary>
            Creates a new setting value from the column update with name provided. If it
            doesn't match a known column update with, null is returned.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SettingValue.FromColumnUpdateTrigger(System.String)">
            <summary>
            Creates a new setting value from the column update trigger. If it doesn't
            match a known column update trigger, null is returned.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SettingValue.FromLayoutDirection(System.String)">
            <summary>
            Creates a new setting value from the layout direction. If it doesn't
            match a known layout direction, null is returned.
            </summary>
        </member>
        <member name="T:LiveSplitCore.SharedTimerRef">
            <summary>
            A Shared Timer that can be used to share a single timer object with multiple
            owners.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SharedTimerRef.Share">
            <summary>
            Creates a new shared timer handle that shares the same timer. The inner
            timer object only gets disposed when the final handle gets disposed.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SharedTimerRef.Read">
            <summary>
            Requests read access to the timer that is being shared. This blocks the
            thread as long as there is an active write lock. Dispose the read lock when
            you are done using the timer.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SharedTimerRef.Write">
            <summary>
            Requests write access to the timer that is being shared. This blocks the
            thread as long as there are active write or read locks. Dispose the write
            lock when you are done using the timer.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SharedTimerRef.ReplaceInner(LiveSplitCore.Timer)">
            <summary>
            Replaces the timer that is being shared by the timer provided. This blocks
            the thread as long as there are active write or read locks. Everyone who is
            sharing the old timer will share the provided timer after successful
            completion.
            </summary>
        </member>
        <member name="T:LiveSplitCore.SharedTimerRefMut">
            <summary>
            A Shared Timer that can be used to share a single timer object with multiple
            owners.
            </summary>
        </member>
        <member name="T:LiveSplitCore.SharedTimer">
            <summary>
            A Shared Timer that can be used to share a single timer object with multiple
            owners.
            </summary>
        </member>
        <member name="T:LiveSplitCore.SplitsComponentRef">
            <summary>
            The Splits Component is the main component for visualizing all the split
            times. Each segment is shown in a tabular fashion showing the segment icon,
            segment name, the delta compared to the chosen comparison, and the split
            time. The list provides scrolling functionality, so not every segment needs
            to be shown all the time.
            </summary>
        </member>
        <member name="T:LiveSplitCore.SplitsComponentRefMut">
            <summary>
            The Splits Component is the main component for visualizing all the split
            times. Each segment is shown in a tabular fashion showing the segment icon,
            segment name, the delta compared to the chosen comparison, and the split
            time. The list provides scrolling functionality, so not every segment needs
            to be shown all the time.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SplitsComponentRefMut.StateAsJson(LiveSplitCore.TimerRef,LiveSplitCore.GeneralLayoutSettingsRef)">
            <summary>
            Encodes the component's state information as JSON.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SplitsComponentRefMut.State(LiveSplitCore.TimerRef,LiveSplitCore.GeneralLayoutSettingsRef)">
            <summary>
            Calculates the component's state based on the timer and layout settings
            provided.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SplitsComponentRefMut.ScrollUp">
            <summary>
            Scrolls up the window of the segments that are shown. Doesn't move the
            scroll window if it reaches the top of the segments.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SplitsComponentRefMut.ScrollDown">
            <summary>
            Scrolls down the window of the segments that are shown. Doesn't move the
            scroll window if it reaches the bottom of the segments.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SplitsComponentRefMut.SetVisualSplitCount(System.Int64)">
            <summary>
            The amount of segments to show in the list at any given time. If this is
            set to 0, all the segments are shown. If this is set to a number lower
            than the total amount of segments, only a certain window of all the
            segments is shown. This window can scroll up or down.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SplitsComponentRefMut.SetSplitPreviewCount(System.Int64)">
            <summary>
            If there's more segments than segments that are shown, the window
            showing the segments automatically scrolls up and down when the current
            segment changes. This count determines the minimum number of future
            segments to be shown in this scrolling window when it automatically
            scrolls.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SplitsComponentRefMut.SetAlwaysShowLastSplit(System.Boolean)">
            <summary>
            If not every segment is shown in the scrolling window of segments, then
            this determines whether the final segment is always to be shown, as it
            contains valuable information about the total duration of the chosen
            comparison, which is often the runner's Personal Best.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SplitsComponentRefMut.SetSeparatorLastSplit(System.Boolean)">
            <summary>
            If the last segment is to always be shown, this determines whether to
            show a more pronounced separator in front of the last segment, if it is
            not directly adjacent to the segment shown right before it in the
            scrolling window.
            </summary>
        </member>
        <member name="T:LiveSplitCore.SplitsComponent">
            <summary>
            The Splits Component is the main component for visualizing all the split
            times. Each segment is shown in a tabular fashion showing the segment icon,
            segment name, the delta compared to the chosen comparison, and the split
            time. The list provides scrolling functionality, so not every segment needs
            to be shown all the time.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SplitsComponent.#ctor">
            <summary>
            Creates a new Splits Component.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SplitsComponent.IntoGeneric">
            <summary>
            Converts the component into a generic component suitable for using with a
            layout.
            </summary>
        </member>
        <member name="T:LiveSplitCore.SplitsComponentStateRef">
            <summary>
            The state object that describes a single segment's information to visualize.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SplitsComponentStateRef.FinalSeparatorShown">
            <summary>
            Describes whether a more pronounced separator should be shown in front of
            the last segment provided.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SplitsComponentStateRef.Len">
            <summary>
            Returns the amount of segments to visualize.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SplitsComponentStateRef.IconChangeCount">
            <summary>
            Returns the amount of icon changes that happened in this state object.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SplitsComponentStateRef.IconChangeSegmentIndex(System.Int64)">
            <summary>
            Accesses the index of the segment of the icon change with the specified
            index. This is based on the index in the run, not on the index of the
            SplitState in the State object. The corresponding index is the index field
            of the SplitState object. You may not provide an out of bounds index.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SplitsComponentStateRef.IconChangeIconPtr(System.Int64)">
            <summary>
            The icon data of the segment of the icon change with the specified index.
            The buffer may be empty. This indicates that there is no icon. You may not
            provide an out of bounds index.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SplitsComponentStateRef.IconChangeIconLen(System.Int64)">
            <summary>
            The length of the icon data of the segment of the icon change with the
            specified index.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SplitsComponentStateRef.Name(System.Int64)">
            <summary>
            The name of the segment with the specified index. You may not provide an out
            of bounds index.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SplitsComponentStateRef.ColumnsLen(System.Int64)">
            <summary>
            The amount of columns to visualize for the segment with the specified index.
            The columns are specified from right to left. You may not provide an out of
            bounds index. The amount of columns to visualize may differ from segment to
            segment.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SplitsComponentStateRef.ColumnValue(System.Int64,System.Int64)">
            <summary>
            The column's value to show for the split and column with the specified
            index. The columns are specified from right to left. You may not provide an
            out of bounds index.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SplitsComponentStateRef.ColumnSemanticColor(System.Int64,System.Int64)">
            <summary>
            The semantic coloring information the column's value carries of the segment
            and column with the specified index. The columns are specified from right to
            left. You may not provide an out of bounds index.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SplitsComponentStateRef.IsCurrentSplit(System.Int64)">
            <summary>
            Describes if the segment with the specified index is the segment the active
            attempt is currently on.
            </summary>
        </member>
        <member name="T:LiveSplitCore.SplitsComponentStateRefMut">
            <summary>
            The state object that describes a single segment's information to visualize.
            </summary>
        </member>
        <member name="T:LiveSplitCore.SplitsComponentState">
            <summary>
            The state object that describes a single segment's information to visualize.
            </summary>
        </member>
        <member name="T:LiveSplitCore.SumOfBestCleanerRef">
            <summary>
            A Sum of Best Cleaner allows you to interactively remove potential issues in
            the Segment History that lead to an inaccurate Sum of Best. If you skip a
            split, whenever you get to the next split, the combined segment time might
            be faster than the sum of the individual best segments. The Sum of Best
            Cleaner will point out all of occurrences of this and allows you to delete
            them individually if any of them seem wrong.
            </summary>
        </member>
        <member name="T:LiveSplitCore.SumOfBestCleanerRefMut">
            <summary>
            A Sum of Best Cleaner allows you to interactively remove potential issues in
            the Segment History that lead to an inaccurate Sum of Best. If you skip a
            split, whenever you get to the next split, the combined segment time might
            be faster than the sum of the individual best segments. The Sum of Best
            Cleaner will point out all of occurrences of this and allows you to delete
            them individually if any of them seem wrong.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SumOfBestCleanerRefMut.NextPotentialCleanUp">
            <summary>
            Returns the next potential clean up. If there are no more potential
            clean ups, null is returned.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SumOfBestCleanerRefMut.Apply(LiveSplitCore.PotentialCleanUp)">
            <summary>
            Applies a clean up to the Run.
            </summary>
        </member>
        <member name="T:LiveSplitCore.SumOfBestCleaner">
            <summary>
            A Sum of Best Cleaner allows you to interactively remove potential issues in
            the Segment History that lead to an inaccurate Sum of Best. If you skip a
            split, whenever you get to the next split, the combined segment time might
            be faster than the sum of the individual best segments. The Sum of Best
            Cleaner will point out all of occurrences of this and allows you to delete
            them individually if any of them seem wrong.
            </summary>
        </member>
        <member name="T:LiveSplitCore.SumOfBestComponentRef">
            <summary>
            The Sum of Best Segments Component shows the fastest possible time to
            complete a run of this category, based on information collected from all the
            previous attempts. This often matches up with the sum of the best segment
            times of all the segments, but that may not always be the case, as skipped
            segments may introduce combined segments that may be faster than the actual
            sum of their best segment times. The name is therefore a bit misleading, but
            sticks around for historical reasons.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SumOfBestComponentRef.StateAsJson(LiveSplitCore.TimerRef)">
            <summary>
            Encodes the component's state information as JSON.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SumOfBestComponentRef.State(LiveSplitCore.TimerRef)">
            <summary>
            Calculates the component's state based on the timer provided.
            </summary>
        </member>
        <member name="T:LiveSplitCore.SumOfBestComponentRefMut">
            <summary>
            The Sum of Best Segments Component shows the fastest possible time to
            complete a run of this category, based on information collected from all the
            previous attempts. This often matches up with the sum of the best segment
            times of all the segments, but that may not always be the case, as skipped
            segments may introduce combined segments that may be faster than the actual
            sum of their best segment times. The name is therefore a bit misleading, but
            sticks around for historical reasons.
            </summary>
        </member>
        <member name="T:LiveSplitCore.SumOfBestComponent">
            <summary>
            The Sum of Best Segments Component shows the fastest possible time to
            complete a run of this category, based on information collected from all the
            previous attempts. This often matches up with the sum of the best segment
            times of all the segments, but that may not always be the case, as skipped
            segments may introduce combined segments that may be faster than the actual
            sum of their best segment times. The name is therefore a bit misleading, but
            sticks around for historical reasons.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SumOfBestComponent.#ctor">
            <summary>
            Creates a new Sum of Best Segments Component.
            </summary>
        </member>
        <member name="M:LiveSplitCore.SumOfBestComponent.IntoGeneric">
            <summary>
            Converts the component into a generic component suitable for using with a
            layout.
            </summary>
        </member>
        <member name="T:LiveSplitCore.TextComponentRef">
            <summary>
            The Text Component simply visualizes any given text. This can either be a
            single centered text, or split up into a left and right text, which is
            suitable for a situation where you have a label and a value.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TextComponentRef.StateAsJson(LiveSplitCore.TimerRef)">
            <summary>
            Encodes the component's state information as JSON.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TextComponentRef.State(LiveSplitCore.TimerRef)">
            <summary>
            Calculates the component's state.
            </summary>
        </member>
        <member name="T:LiveSplitCore.TextComponentRefMut">
            <summary>
            The Text Component simply visualizes any given text. This can either be a
            single centered text, or split up into a left and right text, which is
            suitable for a situation where you have a label and a value.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TextComponentRefMut.SetCenter(System.String)">
            <summary>
            Sets the centered text. If the current mode is split, it is switched to
            centered mode.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TextComponentRefMut.SetLeft(System.String)">
            <summary>
            Sets the left text. If the current mode is centered, it is switched to
            split mode, with the right text being empty.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TextComponentRefMut.SetRight(System.String)">
            <summary>
            Sets the right text. If the current mode is centered, it is switched to
            split mode, with the left text being empty.
            </summary>
        </member>
        <member name="T:LiveSplitCore.TextComponent">
            <summary>
            The Text Component simply visualizes any given text. This can either be a
            single centered text, or split up into a left and right text, which is
            suitable for a situation where you have a label and a value.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TextComponent.#ctor">
            <summary>
            Creates a new Text Component.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TextComponent.IntoGeneric">
            <summary>
            Converts the component into a generic component suitable for using with a
            layout.
            </summary>
        </member>
        <member name="T:LiveSplitCore.TextComponentStateRef">
            <summary>
            The state object describes the information to visualize for this component.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TextComponentStateRef.Left">
            <summary>
            Accesses the left part of the text. If the text isn't split up, an empty
            string is returned instead.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TextComponentStateRef.Right">
            <summary>
            Accesses the right part of the text. If the text isn't split up, an empty
            string is returned instead.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TextComponentStateRef.Center">
            <summary>
            Accesses the centered text. If the text isn't centered, an empty string is
            returned instead.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TextComponentStateRef.IsSplit">
            <summary>
            Returns whether the text is split up into a left and right part.
            </summary>
        </member>
        <member name="T:LiveSplitCore.TextComponentStateRefMut">
            <summary>
            The state object describes the information to visualize for this component.
            </summary>
        </member>
        <member name="T:LiveSplitCore.TextComponentState">
            <summary>
            The state object describes the information to visualize for this component.
            </summary>
        </member>
        <member name="T:LiveSplitCore.TimeRef">
            <summary>
            A time that can store a Real Time and a Game Time. Both of them are
            optional.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimeRef.Clone">
            <summary>
            Clones the time.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimeRef.RealTime">
            <summary>
            The Real Time value. This may be null if this time has no Real Time value.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimeRef.GameTime">
            <summary>
            The Game Time value. This may be null if this time has no Game Time value.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimeRef.Index(System.Byte)">
            <summary>
            Access the time's value for the timing method specified.
            </summary>
        </member>
        <member name="T:LiveSplitCore.TimeRefMut">
            <summary>
            A time that can store a Real Time and a Game Time. Both of them are
            optional.
            </summary>
        </member>
        <member name="T:LiveSplitCore.Time">
            <summary>
            A time that can store a Real Time and a Game Time. Both of them are
            optional.
            </summary>
        </member>
        <member name="T:LiveSplitCore.TimeSpanRef">
            <summary>
            A Time Span represents a certain span of time.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimeSpanRef.Clone">
            <summary>
            Clones the Time Span.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimeSpanRef.TotalSeconds">
            <summary>
            Returns the total amount of seconds (including decimals) this Time Span
            represents.
            </summary>
        </member>
        <member name="T:LiveSplitCore.TimeSpanRefMut">
            <summary>
            A Time Span represents a certain span of time.
            </summary>
        </member>
        <member name="T:LiveSplitCore.TimeSpan">
            <summary>
            A Time Span represents a certain span of time.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimeSpan.FromSeconds(System.Double)">
            <summary>
            Creates a new Time Span from a given amount of seconds.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimeSpan.Parse(System.String)">
            <summary>
            Parses a Time Span from a string. Returns null if the time can't be
            parsed.
            </summary>
        </member>
        <member name="T:LiveSplitCore.TimerRef">
            <summary>
            A Timer provides all the capabilities necessary for doing speedrun attempts.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimerRef.CurrentTimingMethod">
            <summary>
            Returns the currently selected Timing Method.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimerRef.CurrentComparison">
            <summary>
            Returns the current comparison that is being compared against. This may
            be a custom comparison or one of the Comparison Generators.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimerRef.IsGameTimeInitialized">
            <summary>
            Returns whether Game Time is currently initialized. Game Time
            automatically gets uninitialized for each new attempt.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimerRef.IsGameTimePaused">
            <summary>
            Returns whether the Game Timer is currently paused. If the Game Timer is
            not paused, it automatically increments similar to Real Time.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimerRef.LoadingTimes">
            <summary>
            Accesses the loading times. Loading times are defined as Game Time - Real Time.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimerRef.CurrentPhase">
            <summary>
            Returns the current Timer Phase.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimerRef.GetRun">
            <summary>
            Accesses the Run in use by the Timer.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimerRef.SaveAsLss">
            <summary>
            Saves the Run in use by the Timer as a LiveSplit splits file (*.lss).
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimerRef.PrintDebug">
            <summary>
            Prints out debug information representing the whole state of the Timer. This
            is being written to stdout.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimerRef.CurrentTime">
            <summary>
            Returns the current time of the Timer. The Game Time is null if the Game
            Time has not been initialized.
            </summary>
        </member>
        <member name="T:LiveSplitCore.TimerRefMut">
            <summary>
            A Timer provides all the capabilities necessary for doing speedrun attempts.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimerRefMut.ReplaceRun(LiveSplitCore.RunRefMut,System.Boolean)">
            <summary>
            Replaces the Run object used by the Timer with the Run object provided. If
            the Run provided contains no segments, it can't be used for timing and is
            not being modified. Otherwise the Run that was in use by the Timer gets
            stored in the Run object provided. Before the Run is returned, the current
            attempt is reset and the splits are being updated depending on the
            `update_splits` parameter. The return value indicates whether the Run got
            replaced successfully.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimerRefMut.SetRun(LiveSplitCore.Run)">
            <summary>
            Sets the Run object used by the Timer with the Run object provided. If the
            Run provided contains no segments, it can't be used for timing and gets
            returned again. If the Run object can be set, the original Run object in use
            by the Timer is disposed by this method and null is returned.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimerRefMut.Start">
            <summary>
            Starts the Timer if there is no attempt in progress. If that's not the
            case, nothing happens.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimerRefMut.Split">
            <summary>
            If an attempt is in progress, stores the current time as the time of the
            current split. The attempt ends if the last split time is stored.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimerRefMut.SplitOrStart">
            <summary>
            Starts a new attempt or stores the current time as the time of the
            current split. The attempt ends if the last split time is stored.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimerRefMut.SkipSplit">
            <summary>
            Skips the current split if an attempt is in progress and the
            current split is not the last split.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimerRefMut.UndoSplit">
            <summary>
            Removes the split time from the last split if an attempt is in progress
            and there is a previous split. The Timer Phase also switches to
            `Running` if it previously was `Ended`.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimerRefMut.Reset(System.Boolean)">
            <summary>
            Resets the current attempt if there is one in progress. If the splits
            are to be updated, all the information of the current attempt is stored
            in the Run's history. Otherwise the current attempt's information is
            discarded.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimerRefMut.ResetAndSetAttemptAsPb">
            <summary>
            Resets the current attempt if there is one in progress. The splits are
            updated such that the current attempt's split times are being stored as
            the new Personal Best.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimerRefMut.Pause">
            <summary>
            Pauses an active attempt that is not paused.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimerRefMut.Resume">
            <summary>
            Resumes an attempt that is paused.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimerRefMut.TogglePause">
            <summary>
            Toggles an active attempt between `Paused` and `Running`.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimerRefMut.TogglePauseOrStart">
            <summary>
            Toggles an active attempt between `Paused` and `Running` or starts an
            attempt if there's none in progress.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimerRefMut.UndoAllPauses">
            <summary>
            Removes all the pause times from the current time. If the current
            attempt is paused, it also resumes that attempt. Additionally, if the
            attempt is finished, the final split time is adjusted to not include the
            pause times as well.
            
            # Warning
            
            This behavior is not entirely optimal, as generally only the final split
            time is modified, while all other split times are left unmodified, which
            may not be what actually happened during the run.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimerRefMut.SetCurrentTimingMethod(System.Byte)">
            <summary>
            Sets the current Timing Method to the Timing Method provided.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimerRefMut.SwitchToNextComparison">
            <summary>
            Switches the current comparison to the next comparison in the list.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimerRefMut.SwitchToPreviousComparison">
            <summary>
            Switches the current comparison to the previous comparison in the list.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimerRefMut.InitializeGameTime">
            <summary>
            Initializes Game Time for the current attempt. Game Time automatically
            gets uninitialized for each new attempt.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimerRefMut.DeinitializeGameTime">
            <summary>
            Deinitializes Game Time for the current attempt.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimerRefMut.PauseGameTime">
            <summary>
            Pauses the Game Timer such that it doesn't automatically increment
            similar to Real Time.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimerRefMut.ResumeGameTime">
            <summary>
            Resumes the Game Timer such that it automatically increments similar to
            Real Time, starting from the Game Time it was paused at.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimerRefMut.SetGameTime(LiveSplitCore.TimeSpanRef)">
            <summary>
            Sets the Game Time to the time specified. This also works if the Game
            Time is paused, which can be used as a way of updating the Game Timer
            periodically without it automatically moving forward. This ensures that
            the Game Timer never shows any time that is not coming from the game.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimerRefMut.SetLoadingTimes(LiveSplitCore.TimeSpanRef)">
            <summary>
            Instead of setting the Game Time directly, this method can be used to
            just specify the amount of time the game has been loading. The Game Time
            is then automatically determined by Real Time - Loading Times.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimerRefMut.MarkAsUnmodified">
            <summary>
            Marks the Run as unmodified, so that it is known that all the changes
            have been saved.
            </summary>
        </member>
        <member name="T:LiveSplitCore.Timer">
            <summary>
            A Timer provides all the capabilities necessary for doing speedrun attempts.
            </summary>
        </member>
        <member name="M:LiveSplitCore.Timer.New(LiveSplitCore.Run)">
            <summary>
            Creates a new Timer based on a Run object storing all the information
            about the splits. The Run object needs to have at least one segment, so
            that the Timer can store the final time. If a Run object with no
            segments is provided, the Timer creation fails and null is returned.
            </summary>
        </member>
        <member name="M:LiveSplitCore.Timer.IntoShared">
            <summary>
            Consumes the Timer and creates a Shared Timer that can be shared across
            multiple threads with multiple owners.
            </summary>
        </member>
        <member name="M:LiveSplitCore.Timer.IntoRun(System.Boolean)">
            <summary>
            Takes out the Run from the Timer and resets the current attempt if there
            is one in progress. If the splits are to be updated, all the information
            of the current attempt is stored in the Run's history. Otherwise the
            current attempt's information is discarded.
            </summary>
        </member>
        <member name="T:LiveSplitCore.TimerComponentRef">
            <summary>
            The Timer Component is a component that shows the total time of the current
            attempt as a digital clock. The color of the time shown is based on a how
            well the current attempt is doing compared to the chosen comparison.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimerComponentRef.StateAsJson(LiveSplitCore.TimerRef,LiveSplitCore.GeneralLayoutSettingsRef)">
            <summary>
            Encodes the component's state information as JSON.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimerComponentRef.State(LiveSplitCore.TimerRef,LiveSplitCore.GeneralLayoutSettingsRef)">
            <summary>
            Calculates the component's state based on the timer and the layout
            settings provided.
            </summary>
        </member>
        <member name="T:LiveSplitCore.TimerComponentRefMut">
            <summary>
            The Timer Component is a component that shows the total time of the current
            attempt as a digital clock. The color of the time shown is based on a how
            well the current attempt is doing compared to the chosen comparison.
            </summary>
        </member>
        <member name="T:LiveSplitCore.TimerComponent">
            <summary>
            The Timer Component is a component that shows the total time of the current
            attempt as a digital clock. The color of the time shown is based on a how
            well the current attempt is doing compared to the chosen comparison.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimerComponent.#ctor">
            <summary>
            Creates a new Timer Component.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimerComponent.IntoGeneric">
            <summary>
            Converts the component into a generic component suitable for using with a
            layout.
            </summary>
        </member>
        <member name="T:LiveSplitCore.TimerComponentStateRef">
            <summary>
            The state object describes the information to visualize for this component.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimerComponentStateRef.Time">
            <summary>
            The time shown by the component without the fractional part.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimerComponentStateRef.Fraction">
            <summary>
            The fractional part of the time shown (including the dot).
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimerComponentStateRef.SemanticColor">
            <summary>
            The semantic coloring information the time carries.
            </summary>
        </member>
        <member name="T:LiveSplitCore.TimerComponentStateRefMut">
            <summary>
            The state object describes the information to visualize for this component.
            </summary>
        </member>
        <member name="T:LiveSplitCore.TimerComponentState">
            <summary>
            The state object describes the information to visualize for this component.
            </summary>
        </member>
        <member name="T:LiveSplitCore.TimerReadLockRef">
            <summary>
            A Timer Read Lock allows temporary read access to a timer. Dispose this to
            release the read lock.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimerReadLockRef.Timer">
            <summary>
            Accesses the timer.
            </summary>
        </member>
        <member name="T:LiveSplitCore.TimerReadLockRefMut">
            <summary>
            A Timer Read Lock allows temporary read access to a timer. Dispose this to
            release the read lock.
            </summary>
        </member>
        <member name="T:LiveSplitCore.TimerReadLock">
            <summary>
            A Timer Read Lock allows temporary read access to a timer. Dispose this to
            release the read lock.
            </summary>
        </member>
        <member name="T:LiveSplitCore.TimerWriteLockRef">
            <summary>
            A Timer Write Lock allows temporary write access to a timer. Dispose this to
            release the write lock.
            </summary>
        </member>
        <member name="T:LiveSplitCore.TimerWriteLockRefMut">
            <summary>
            A Timer Write Lock allows temporary write access to a timer. Dispose this to
            release the write lock.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TimerWriteLockRefMut.Timer">
            <summary>
            Accesses the timer.
            </summary>
        </member>
        <member name="T:LiveSplitCore.TimerWriteLock">
            <summary>
            A Timer Write Lock allows temporary write access to a timer. Dispose this to
            release the write lock.
            </summary>
        </member>
        <member name="T:LiveSplitCore.TitleComponentRef">
            <summary>
            The Title Component is a component that shows the name of the game and the
            category that is being run. Additionally, the game icon, the attempt count,
            and the total number of successfully finished runs can be shown.
            </summary>
        </member>
        <member name="T:LiveSplitCore.TitleComponentRefMut">
            <summary>
            The Title Component is a component that shows the name of the game and the
            category that is being run. Additionally, the game icon, the attempt count,
            and the total number of successfully finished runs can be shown.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TitleComponentRefMut.StateAsJson(LiveSplitCore.TimerRef)">
            <summary>
            Encodes the component's state information as JSON.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TitleComponentRefMut.State(LiveSplitCore.TimerRef)">
            <summary>
            Calculates the component's state based on the timer provided.
            </summary>
        </member>
        <member name="T:LiveSplitCore.TitleComponent">
            <summary>
            The Title Component is a component that shows the name of the game and the
            category that is being run. Additionally, the game icon, the attempt count,
            and the total number of successfully finished runs can be shown.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TitleComponent.#ctor">
            <summary>
            Creates a new Title Component.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TitleComponent.IntoGeneric">
            <summary>
            Converts the component into a generic component suitable for using with a
            layout.
            </summary>
        </member>
        <member name="T:LiveSplitCore.TitleComponentStateRef">
            <summary>
            The state object describes the information to visualize for this component.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TitleComponentStateRef.IconChangePtr">
            <summary>
            The data of the game's icon. This value is only specified whenever the icon
            changes. If you explicitly want to query this value, remount the component.
            The buffer may be empty. This indicates that there is no icon. If no change
            occurred, null is returned instead.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TitleComponentStateRef.IconChangeLen">
            <summary>
            The length of the game's icon data.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TitleComponentStateRef.Line1">
            <summary>
            The first title line to show. This is either the game's name, or a
            combination of the game's name and the category.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TitleComponentStateRef.Line2">
            <summary>
            By default the category name is shown on the second line. Based on the
            settings, it can however instead be shown in a single line together with
            the game name. In that case null is returned instead.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TitleComponentStateRef.IsCentered">
            <summary>
            Specifies whether the title should centered or aligned to the left
            instead.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TitleComponentStateRef.ShowsFinishedRuns">
            <summary>
            Returns whether the amount of successfully finished attempts is supposed to
            be shown.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TitleComponentStateRef.FinishedRuns">
            <summary>
            Returns the amount of successfully finished attempts.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TitleComponentStateRef.ShowsAttempts">
            <summary>
            Returns whether the amount of total attempts is supposed to be shown.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TitleComponentStateRef.Attempts">
            <summary>
            Returns the amount of total attempts.
            </summary>
        </member>
        <member name="T:LiveSplitCore.TitleComponentStateRefMut">
            <summary>
            The state object describes the information to visualize for this component.
            </summary>
        </member>
        <member name="T:LiveSplitCore.TitleComponentState">
            <summary>
            The state object describes the information to visualize for this component.
            </summary>
        </member>
        <member name="T:LiveSplitCore.TotalPlaytimeComponentRef">
            <summary>
            The Total Playtime Component is a component that shows the total amount of
            time that the current category has been played for.
            </summary>
        </member>
        <member name="T:LiveSplitCore.TotalPlaytimeComponentRefMut">
            <summary>
            The Total Playtime Component is a component that shows the total amount of
            time that the current category has been played for.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TotalPlaytimeComponentRefMut.StateAsJson(LiveSplitCore.TimerRef)">
            <summary>
            Encodes the component's state information as JSON.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TotalPlaytimeComponentRefMut.State(LiveSplitCore.TimerRef)">
            <summary>
            Calculates the component's state based on the timer provided.
            </summary>
        </member>
        <member name="T:LiveSplitCore.TotalPlaytimeComponent">
            <summary>
            The Total Playtime Component is a component that shows the total amount of
            time that the current category has been played for.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TotalPlaytimeComponent.#ctor">
            <summary>
            Creates a new Total Playtime Component.
            </summary>
        </member>
        <member name="M:LiveSplitCore.TotalPlaytimeComponent.IntoGeneric">
            <summary>
            Converts the component into a generic component suitable for using with a
            layout.
            </summary>
        </member>
        <member name="M:LiveSplitCore.LSCoreString.op_Implicit(LiveSplitCore.LSCoreString)~System.String">
            Unsafely assumes that the length can be retrieved from
            `get_buf_len`. This is only true for strings that have actually been
            retrieved from livesplit-core.
        </member>
        <member name="F:XGamePad.Gamepad.lastAButtonState">
             Gamepad last state variables
            
        </member>
        <member name="T:XGamePad.Gamepad.ButtonHandler">
             Event handlers
            
        </member>
        <member name="E:XGamePad.Gamepad.OnAButtonPress">
             Events for gamepad
            
        </member>
        <member name="M:XGamePad.Gamepad.#ctor(System.Int32)">
             Creates a new instance of the Gamepad object, to grab user control
             Parameter deviceIndex must be a value between 0 and 3.
            
        </member>
        <member name="M:XGamePad.Gamepad.Update">
             This updates the state of the device and triggers events
             to any registered listeners.
            
        </member>
        <member name="M:XGamePad.Gamepad.SetVibration(System.UInt16,System.UInt16)">
             Sets the vibration level for the gamepad controller
             The leftSpeed adjusts the low frequency motor and the rightSpeed adjusts the high frequency motor
            
        </member>
    </members>
</doc>
